<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-ocaml.atom"/>
<id>urn:rprimus:github:newocamlrepos</id>
<updated>2021-01-23T07:46:17Z</updated>
<title type='text'>New GitHub Ocaml Repos</title>
 <entry>
  <title>nojima: ray-tracing-in-ocaml</title>
  <author>
   <name>nojima</name>
  </author>
  <link href="https://github.com/nojima/ray-tracing-in-ocaml" />
  <id>urn:rprimus:github:nojima:ray-tracing-in-ocaml</id>
  <published>2021-01-23T07:46:17Z</published>
  <updated>2021-01-23T07:46:17Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>nikaido-shinku: TexasHoldem</title>
  <author>
   <name>nikaido-shinku</name>
  </author>
  <link href="https://github.com/nikaido-shinku/TexasHoldem" />
  <id>urn:rprimus:github:nikaido-shinku:TexasHoldem</id>
  <published>2021-01-22T21:37:29Z</published>
  <updated>2021-01-22T21:37:29Z</updated>
  <content type="html">
   Cornell CS3110 Functional Programming Project
  </content>
 </entry>
 <entry>
  <title>vishalBindal: COL226</title>
  <author>
   <name>vishalBindal</name>
  </author>
  <link href="https://github.com/vishalBindal/COL226" />
  <id>urn:rprimus:github:vishalBindal:COL226</id>
  <published>2021-01-22T16:56:20Z</published>
  <updated>2021-01-22T16:56:20Z</updated>
  <content type="html">
   Programming languages (2019-20 sem II) assignments
  </content>
 </entry>
 <entry>
  <title>turbodami: OCamlServer</title>
  <author>
   <name>turbodami</name>
  </author>
  <link href="https://github.com/turbodami/OCamlServer" />
  <id>urn:rprimus:github:turbodami:OCamlServer</id>
  <published>2021-01-22T10:54:41Z</published>
  <updated>2021-01-22T10:54:41Z</updated>
  <content type="html">
   Simple HTTP server in OCaml. It also parses JSON and calculates matrix determinants.
  </content>
 </entry>
 <entry>
  <title>twinstwins: base_of_programming</title>
  <author>
   <name>twinstwins</name>
  </author>
  <link href="https://github.com/twinstwins/base_of_programming" />
  <id>urn:rprimus:github:twinstwins:base_of_programming</id>
  <published>2021-01-22T10:23:59Z</published>
  <updated>2021-01-22T10:23:59Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>rwmjones: guestfs-tools</title>
  <author>
   <name>rwmjones</name>
  </author>
  <link href="https://github.com/rwmjones/guestfs-tools" />
  <id>urn:rprimus:github:rwmjones:guestfs-tools</id>
  <published>2021-01-22T09:32:22Z</published>
  <updated>2021-01-22T09:32:22Z</updated>
  <content type="html">
   Testing new guestfs-tools split
  </content>
 </entry>
 <entry>
  <title>derui: scheme-ocaml-impl</title>
  <author>
   <name>derui</name>
  </author>
  <link href="https://github.com/derui/scheme-ocaml-impl" />
  <id>urn:rprimus:github:derui:scheme-ocaml-impl</id>
  <published>2021-01-22T00:03:45Z</published>
  <updated>2021-01-22T00:03:45Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>pooja654: todolist</title>
  <author>
   <name>pooja654</name>
  </author>
  <link href="https://github.com/pooja654/todolist" />
  <id>urn:rprimus:github:pooja654:todolist</id>
  <published>2021-01-21T20:33:12Z</published>
  <updated>2021-01-21T20:33:12Z</updated>
  <content type="html">
   This &quot;to-do listâ allows users to create and interact with tasks, whether in manual mode (where users set their tasks) or in automatic mode (where pre-set tasks are created). Additionally, there is a calendar of appointments available to be customized. All of the above has been thoroughly tested via OUnit tests, and can be displayed in a user-friendly GUI. 
  </content>
 </entry>
 <entry>
  <title>LuKC1024: register-allocation</title>
  <author>
   <name>LuKC1024</name>
  </author>
  <link href="https://github.com/LuKC1024/register-allocation" />
  <id>urn:rprimus:github:LuKC1024:register-allocation</id>
  <published>2021-01-21T20:15:29Z</published>
  <updated>2021-01-21T20:15:29Z</updated>
  <content type="html">
   Implement in OCaml Pfenning, Frank, and AndrÃ© Platzer. &quot;Lecture Notes on Register Allocation.&quot; (2009).
  </content>
 </entry>
 <entry>
  <title>erwinkn: program-eq-proof</title>
  <author>
   <name>erwinkn</name>
  </author>
  <link href="https://github.com/erwinkn/program-eq-proof" />
  <id>urn:rprimus:github:erwinkn:program-eq-proof</id>
  <published>2021-01-21T20:03:07Z</published>
  <updated>2021-01-21T20:03:07Z</updated>
  <content type="html">
   My solutions to the formal verification and type theory class (INF551) from Samuel Mimram at Ecole Polytechnique. September - December 2018.
  </content>
 </entry>
 <entry>
  <title>sohniuthra: Augmented-To-Do-List</title>
  <author>
   <name>sohniuthra</name>
  </author>
  <link href="https://github.com/sohniuthra/Augmented-To-Do-List" />
  <id>urn:rprimus:github:sohniuthra:Augmented-To-Do-List</id>
  <published>2021-01-21T20:01:21Z</published>
  <updated>2021-01-21T20:01:21Z</updated>
  <content type="html">
   This project is an âaugmented to-do listâ that gives a user the ability to create/interact with a manual or automatic (pre-set categories) to-do list and a calendar of appointments, all of which are visible using a user-friendly GUI. A comprehensive test suite is also included.
  </content>
 </entry>
 <entry>
  <title>gbzaleski: WPF-Combined</title>
  <author>
   <name>gbzaleski</name>
  </author>
  <link href="https://github.com/gbzaleski/WPF-Combined" />
  <id>urn:rprimus:github:gbzaleski:WPF-Combined</id>
  <published>2021-01-21T17:29:51Z</published>
  <updated>2021-01-21T17:29:51Z</updated>
  <content type="html">
   All Functional Programming Tasks - implemented using OCaml language
  </content>
 </entry>
 <entry>
  <title>NetaRak: Compiler</title>
  <author>
   <name>NetaRak</name>
  </author>
  <link href="https://github.com/NetaRak/Compiler" />
  <id>urn:rprimus:github:NetaRak:Compiler</id>
  <published>2021-01-21T17:21:50Z</published>
  <updated>2021-01-21T17:21:50Z</updated>
  <content type="html">
   compiler for Scheme language written in Ocmal
  </content>
 </entry>
 <entry>
  <title>shnewto: ocaml-toys</title>
  <author>
   <name>shnewto</name>
  </author>
  <link href="https://github.com/shnewto/ocaml-toys" />
  <id>urn:rprimus:github:shnewto:ocaml-toys</id>
  <published>2021-01-21T16:12:23Z</published>
  <updated>2021-01-21T16:12:23Z</updated>
  <content type="html">
   toy ocaml programs
  </content>
 </entry>
 <entry>
  <title>n-osborne: unification-in-OCaml</title>
  <author>
   <name>n-osborne</name>
  </author>
  <link href="https://github.com/n-osborne/unification-in-OCaml" />
  <id>urn:rprimus:github:n-osborne:unification-in-OCaml</id>
  <published>2021-01-21T15:47:59Z</published>
  <updated>2021-01-21T15:47:59Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>SkySkimmer: coq-lean-import</title>
  <author>
   <name>SkySkimmer</name>
  </author>
  <link href="https://github.com/SkySkimmer/coq-lean-import" />
  <id>urn:rprimus:github:SkySkimmer:coq-lean-import</id>
  <published>2021-01-21T10:13:46Z</published>
  <updated>2021-01-21T10:13:46Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>tudny: WPF-Przelewanka</title>
  <author>
   <name>tudny</name>
  </author>
  <link href="https://github.com/tudny/WPF-Przelewanka" />
  <id>urn:rprimus:github:tudny:WPF-Przelewanka</id>
  <published>2021-01-21T08:28:02Z</published>
  <updated>2021-01-21T08:28:02Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>udai22: FlappyCaml</title>
  <author>
   <name>udai22</name>
  </author>
  <link href="https://github.com/udai22/FlappyCaml" />
  <id>urn:rprimus:github:udai22:FlappyCaml</id>
  <published>2021-01-21T07:34:06Z</published>
  <updated>2021-01-21T07:34:06Z</updated>
  <content type="html">
   This project was done for CS 3110, Fall 2020.
  </content>
 </entry>
</feed>
