<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-ocaml.atom"/>
<id>urn:rprimus:github:newocamlrepos</id>
<updated>2021-01-22T00:03:45Z</updated>
<title type='text'>New GitHub Ocaml Repos</title>
 <entry>
  <title>derui: scheme-ocaml-impl</title>
  <author>
   <name>derui</name>
  </author>
  <link href="https://github.com/derui/scheme-ocaml-impl" />
  <id>urn:rprimus:github:derui:scheme-ocaml-impl</id>
  <published>2021-01-22T00:03:45Z</published>
  <updated>2021-01-22T00:03:45Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>RedMike-NunoMarques: problemC</title>
  <author>
   <name>RedMike-NunoMarques</name>
  </author>
  <link href="https://github.com/RedMike-NunoMarques/problemC" />
  <id>urn:rprimus:github:RedMike-NunoMarques:problemC</id>
  <published>2021-01-21T22:30:44Z</published>
  <updated>2021-01-21T22:30:44Z</updated>
  <content type="html">
   Course unit: Computation Theory (TC) - Problem C in ocaml
  </content>
 </entry>
 <entry>
  <title>RedMike-NunoMarques: problemB</title>
  <author>
   <name>RedMike-NunoMarques</name>
  </author>
  <link href="https://github.com/RedMike-NunoMarques/problemB" />
  <id>urn:rprimus:github:RedMike-NunoMarques:problemB</id>
  <published>2021-01-21T22:14:03Z</published>
  <updated>2021-01-21T22:14:03Z</updated>
  <content type="html">
   Course unit: Computation Theory (TC) - Problem B in ocaml
  </content>
 </entry>
 <entry>
  <title>pooja654: todolist</title>
  <author>
   <name>pooja654</name>
  </author>
  <link href="https://github.com/pooja654/todolist" />
  <id>urn:rprimus:github:pooja654:todolist</id>
  <published>2021-01-21T20:33:12Z</published>
  <updated>2021-01-21T20:33:12Z</updated>
  <content type="html">
   This &quot;to-do listâ allows users to create and interact with tasks, whether in manual mode (where users set their tasks) or in automatic mode (where pre-set tasks are created). Additionally, there is a calendar of appointments available to be customized. All of the above has been thoroughly tested via OUnit tests, and can be displayed in a user-friendly GUI. 
  </content>
 </entry>
 <entry>
  <title>LuKC1024: register-allocation</title>
  <author>
   <name>LuKC1024</name>
  </author>
  <link href="https://github.com/LuKC1024/register-allocation" />
  <id>urn:rprimus:github:LuKC1024:register-allocation</id>
  <published>2021-01-21T20:15:29Z</published>
  <updated>2021-01-21T20:15:29Z</updated>
  <content type="html">
   Implement in OCaml Pfenning, Frank, and AndrÃ© Platzer. &quot;Lecture Notes on Register Allocation.&quot; (2009).
  </content>
 </entry>
 <entry>
  <title>erwinkn: program-eq-proof</title>
  <author>
   <name>erwinkn</name>
  </author>
  <link href="https://github.com/erwinkn/program-eq-proof" />
  <id>urn:rprimus:github:erwinkn:program-eq-proof</id>
  <published>2021-01-21T20:03:07Z</published>
  <updated>2021-01-21T20:03:07Z</updated>
  <content type="html">
   My solutions to the formal verification and type theory class (INF551) from Samuel Mimram at Ecole Polytechnique. September - December 2018.
  </content>
 </entry>
 <entry>
  <title>sohniuthra: Augmented-To-Do-List</title>
  <author>
   <name>sohniuthra</name>
  </author>
  <link href="https://github.com/sohniuthra/Augmented-To-Do-List" />
  <id>urn:rprimus:github:sohniuthra:Augmented-To-Do-List</id>
  <published>2021-01-21T20:01:21Z</published>
  <updated>2021-01-21T20:01:21Z</updated>
  <content type="html">
   This project is an âaugmented to-do listâ that gives a user the ability to create/interact with a manual or automatic (pre-set categories) to-do list and a calendar of appointments, all of which are visible using a user-friendly GUI. A comprehensive test suite is also included.
  </content>
 </entry>
 <entry>
  <title>NetaRak: Compiler</title>
  <author>
   <name>NetaRak</name>
  </author>
  <link href="https://github.com/NetaRak/Compiler" />
  <id>urn:rprimus:github:NetaRak:Compiler</id>
  <published>2021-01-21T17:21:50Z</published>
  <updated>2021-01-21T17:21:50Z</updated>
  <content type="html">
   compiler for Scheme language written in Ocmal
  </content>
 </entry>
 <entry>
  <title>n-osborne: unification-in-OCaml</title>
  <author>
   <name>n-osborne</name>
  </author>
  <link href="https://github.com/n-osborne/unification-in-OCaml" />
  <id>urn:rprimus:github:n-osborne:unification-in-OCaml</id>
  <published>2021-01-21T15:47:59Z</published>
  <updated>2021-01-21T15:47:59Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>SkySkimmer: coq-lean-import</title>
  <author>
   <name>SkySkimmer</name>
  </author>
  <link href="https://github.com/SkySkimmer/coq-lean-import" />
  <id>urn:rprimus:github:SkySkimmer:coq-lean-import</id>
  <published>2021-01-21T10:13:46Z</published>
  <updated>2021-01-21T10:13:46Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>tudny: WPF-Przelewanka</title>
  <author>
   <name>tudny</name>
  </author>
  <link href="https://github.com/tudny/WPF-Przelewanka" />
  <id>urn:rprimus:github:tudny:WPF-Przelewanka</id>
  <published>2021-01-21T08:28:02Z</published>
  <updated>2021-01-21T08:28:02Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>udai22: FlappyCaml</title>
  <author>
   <name>udai22</name>
  </author>
  <link href="https://github.com/udai22/FlappyCaml" />
  <id>urn:rprimus:github:udai22:FlappyCaml</id>
  <published>2021-01-21T07:34:06Z</published>
  <updated>2021-01-21T07:34:06Z</updated>
  <content type="html">
   This project was done for CS 3110, Fall 2020.
  </content>
 </entry>
 <entry>
  <title>nickrobison: ocaml-fact</title>
  <author>
   <name>nickrobison</name>
  </author>
  <link href="https://github.com/nickrobison/ocaml-fact" />
  <id>urn:rprimus:github:nickrobison:ocaml-fact</id>
  <published>2021-01-20T22:39:46Z</published>
  <updated>2021-01-20T22:39:46Z</updated>
  <content type="html">
   OCaml bindings to FaCT++ reasoner
  </content>
 </entry>
 <entry>
  <title>drash7: OCaml-Interpreter</title>
  <author>
   <name>drash7</name>
  </author>
  <link href="https://github.com/drash7/OCaml-Interpreter" />
  <id>urn:rprimus:github:drash7:OCaml-Interpreter</id>
  <published>2021-01-20T20:01:57Z</published>
  <updated>2021-01-20T20:01:57Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>jaiverma: cs6120</title>
  <author>
   <name>jaiverma</name>
  </author>
  <link href="https://github.com/jaiverma/cs6120" />
  <id>urn:rprimus:github:jaiverma:cs6120</id>
  <published>2021-01-20T18:25:01Z</published>
  <updated>2021-01-20T18:25:01Z</updated>
  <content type="html">
   Cornell CS 6120 self-guided compiler course
  </content>
 </entry>
 <entry>
  <title>g-h-o-s-t-s: Boolean-Satisfiability-OCaml</title>
  <author>
   <name>g-h-o-s-t-s</name>
  </author>
  <link href="https://github.com/g-h-o-s-t-s/Boolean-Satisfiability-OCaml" />
  <id>urn:rprimus:github:g-h-o-s-t-s:Boolean-Satisfiability-OCaml</id>
  <published>2021-01-20T16:31:21Z</published>
  <updated>2021-01-20T16:31:21Z</updated>
  <content type="html">
   Using binary trees and the OCaml functional programming language to determine satisfiability for a pre-formatted boolean expression.
  </content>
 </entry>
 <entry>
  <title>neelusb: supervision-work</title>
  <author>
   <name>neelusb</name>
  </author>
  <link href="https://github.com/neelusb/supervision-work" />
  <id>urn:rprimus:github:neelusb:supervision-work</id>
  <published>2021-01-20T07:45:14Z</published>
  <updated>2021-01-20T07:45:14Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>maidul98: csv-editor-reader-in-OCAML</title>
  <author>
   <name>maidul98</name>
  </author>
  <link href="https://github.com/maidul98/csv-editor-reader-in-OCAML" />
  <id>urn:rprimus:github:maidul98:csv-editor-reader-in-OCAML</id>
  <published>2021-01-20T01:40:27Z</published>
  <updated>2021-01-20T01:40:27Z</updated>
  <content type="html">
   
  </content>
 </entry>
</feed>
