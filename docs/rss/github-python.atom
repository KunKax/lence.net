<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-python.atom"/>
<id>urn:rprimus:github:newpythonrepos</id>
<updated>2020-11-17T09:46:28Z</updated>
<title type='text'>New GitHub Python Repos</title>
 <entry>
  <title>Pakrohk-DotFiles: PkTile</title>
  <author>
   <name>Pakrohk-DotFiles</name>
  </author>
  <link href="https://github.com/Pakrohk-DotFiles/PkTile" />
  <id>urn:rprimus:github:Pakrohk-DotFiles:PkTile</id>
  <published>2020-11-17T09:46:28Z</published>
  <updated>2020-11-17T09:46:28Z</updated>
  <content type="html">
   This is my qtile config
  </content>
 </entry>
 <entry>
  <title>b3tar00t: FloodKing</title>
  <author>
   <name>b3tar00t</name>
  </author>
  <link href="https://github.com/b3tar00t/FloodKing" />
  <id>urn:rprimus:github:b3tar00t:FloodKing</id>
  <published>2020-11-17T09:18:35Z</published>
  <updated>2020-11-17T09:18:35Z</updated>
  <content type="html">
   A Powerful DOS tool to stress websites!
  </content>
 </entry>
 <entry>
  <title>amaan-mohib: pdf-maker</title>
  <author>
   <name>amaan-mohib</name>
  </author>
  <link href="https://github.com/amaan-mohib/pdf-maker" />
  <id>urn:rprimus:github:amaan-mohib:pdf-maker</id>
  <published>2020-11-17T08:07:58Z</published>
  <updated>2020-11-17T08:07:58Z</updated>
  <content type="html">
   Create PDFs for your assignments (automatically) !
  </content>
 </entry>
 <entry>
  <title>adityamangal1: REGEX-Python</title>
  <author>
   <name>adityamangal1</name>
  </author>
  <link href="https://github.com/adityamangal1/REGEX-Python" />
  <id>urn:rprimus:github:adityamangal1:REGEX-Python</id>
  <published>2020-11-17T08:02:38Z</published>
  <updated>2020-11-17T08:02:38Z</updated>
  <content type="html">
   Regex 
  </content>
 </entry>
 <entry>
  <title>SenseiOfficial: Sensei_BOT</title>
  <author>
   <name>SenseiOfficial</name>
  </author>
  <link href="https://github.com/SenseiOfficial/Sensei_BOT" />
  <id>urn:rprimus:github:SenseiOfficial:Sensei_BOT</id>
  <published>2020-11-17T07:45:35Z</published>
  <updated>2020-11-17T07:45:35Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Aravindhan-Mohanraj: visualizing-the-weather-data-set</title>
  <author>
   <name>Aravindhan-Mohanraj</name>
  </author>
  <link href="https://github.com/Aravindhan-Mohanraj/visualizing-the-weather-data-set" />
  <id>urn:rprimus:github:Aravindhan-Mohanraj:visualizing-the-weather-data-set</id>
  <published>2020-11-17T07:26:16Z</published>
  <updated>2020-11-17T07:26:16Z</updated>
  <content type="html">
   Visualizing the Weather Dataset using Matplotlib
  </content>
 </entry>
 <entry>
  <title>hmgtech: Drowsiness-Detection</title>
  <author>
   <name>hmgtech</name>
  </author>
  <link href="https://github.com/hmgtech/Drowsiness-Detection" />
  <id>urn:rprimus:github:hmgtech:Drowsiness-Detection</id>
  <published>2020-11-17T07:22:28Z</published>
  <updated>2020-11-17T07:22:28Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>B1anda0: CVE-2020-8209</title>
  <author>
   <name>B1anda0</name>
  </author>
  <link href="https://github.com/B1anda0/CVE-2020-8209" />
  <id>urn:rprimus:github:B1anda0:CVE-2020-8209</id>
  <published>2020-11-17T07:20:46Z</published>
  <updated>2020-11-17T07:20:46Z</updated>
  <content type="html">
   RP2ä¹åçCitrix XenMobile Server 10.12ï¼RP4ä¹åçCitrix XenMobile Server 10.11ï¼RP6ä¹åçCitrix XenMobile Server 10.10åCitrix XenMobile Server 10.9 RP5ä¹åçè®¿é®æ§å¶ä¸å½ï¼ä»èå¯¼è´è½å¤è¯»åä»»ææä»¶ãè¯¥èæ¬ä¸ºCitrix XenMobile ç®å½éåæ¼æ´ï¼CVE-2020-8209ï¼æ¹éæ£æµèæ¬ã
  </content>
 </entry>
 <entry>
  <title>lqrqw: xmly</title>
  <author>
   <name>lqrqw</name>
  </author>
  <link href="https://github.com/lqrqw/xmly" />
  <id>urn:rprimus:github:lqrqw:xmly</id>
  <published>2020-11-17T07:13:12Z</published>
  <updated>2020-11-17T07:13:12Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Aravindhan-Mohanraj: greyatom-python-for-data-science</title>
  <author>
   <name>Aravindhan-Mohanraj</name>
  </author>
  <link href="https://github.com/Aravindhan-Mohanraj/greyatom-python-for-data-science" />
  <id>urn:rprimus:github:Aravindhan-Mohanraj:greyatom-python-for-data-science</id>
  <published>2020-11-17T07:10:03Z</published>
  <updated>2020-11-17T07:10:03Z</updated>
  <content type="html">
   A collection of projects as part of the Python for Data Science program at GreyAtom EduTech Pvt Ltd
  </content>
 </entry>
 <entry>
  <title>hymntaha: data-structure-python</title>
  <author>
   <name>hymntaha</name>
  </author>
  <link href="https://github.com/hymntaha/data-structure-python" />
  <id>urn:rprimus:github:hymntaha:data-structure-python</id>
  <published>2020-11-17T06:57:37Z</published>
  <updated>2020-11-17T06:57:37Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>jonathan-darius: Tic-Tac-Toe-Game</title>
  <author>
   <name>jonathan-darius</name>
  </author>
  <link href="https://github.com/jonathan-darius/Tic-Tac-Toe-Game" />
  <id>urn:rprimus:github:jonathan-darius:Tic-Tac-Toe-Game</id>
  <published>2020-11-17T06:48:31Z</published>
  <updated>2020-11-17T06:48:31Z</updated>
  <content type="html">
   Tic Tac Toe Game Use CLI
  </content>
 </entry>
 <entry>
  <title>HongSIFox: ahriBot_py</title>
  <author>
   <name>HongSIFox</name>
  </author>
  <link href="https://github.com/HongSIFox/ahriBot_py" />
  <id>urn:rprimus:github:HongSIFox:ahriBot_py</id>
  <published>2020-11-17T06:21:51Z</published>
  <updated>2020-11-17T06:21:51Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>haemanlee: portfolio---project</title>
  <author>
   <name>haemanlee</name>
  </author>
  <link href="https://github.com/haemanlee/portfolio---project" />
  <id>urn:rprimus:github:haemanlee:portfolio---project</id>
  <published>2020-11-17T06:16:51Z</published>
  <updated>2020-11-17T06:16:51Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>MRxVASILII: funtest</title>
  <author>
   <name>MRxVASILII</name>
  </author>
  <link href="https://github.com/MRxVASILII/funtest" />
  <id>urn:rprimus:github:MRxVASILII:funtest</id>
  <published>2020-11-17T05:59:23Z</published>
  <updated>2020-11-17T05:59:23Z</updated>
  <content type="html">
   Just test
  </content>
 </entry>
 <entry>
  <title>AiAiGhost: pytorch-cnn-learning</title>
  <author>
   <name>AiAiGhost</name>
  </author>
  <link href="https://github.com/AiAiGhost/pytorch-cnn-learning" />
  <id>urn:rprimus:github:AiAiGhost:pytorch-cnn-learning</id>
  <published>2020-11-17T05:46:09Z</published>
  <updated>2020-11-17T05:46:09Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Timtaran: MyShitBotOnVKBottle</title>
  <author>
   <name>Timtaran</name>
  </author>
  <link href="https://github.com/Timtaran/MyShitBotOnVKBottle" />
  <id>urn:rprimus:github:Timtaran:MyShitBotOnVKBottle</id>
  <published>2020-11-17T05:12:03Z</published>
  <updated>2020-11-17T05:12:03Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>BrunoGazire: Estudo</title>
  <author>
   <name>BrunoGazire</name>
  </author>
  <link href="https://github.com/BrunoGazire/Estudo" />
  <id>urn:rprimus:github:BrunoGazire:Estudo</id>
  <published>2020-11-17T04:12:11Z</published>
  <updated>2020-11-17T04:12:11Z</updated>
  <content type="html">
   Tests
  </content>
 </entry>
 <entry>
  <title>himanshub1007: Alzhimers-Disease-Prediction-Using-Deep-learning</title>
  <author>
   <name>himanshub1007</name>
  </author>
  <link href="https://github.com/himanshub1007/Alzhimers-Disease-Prediction-Using-Deep-learning" />
  <id>urn:rprimus:github:himanshub1007:Alzhimers-Disease-Prediction-Using-Deep-learning</id>
  <published>2020-11-17T04:10:06Z</published>
  <updated>2020-11-17T04:10:06Z</updated>
  <content type="html">
   # AD-Prediction  Convolutional Neural Networks for Alzheimer&#039;s Disease Prediction Using Brain MRI Image  ## Abstract Alzheimers disease (AD) is characterized by severe memory loss and cognitive impairment. It associates with significant brain structure changes, which can be measured by magnetic resonance imaging (MRI) scan. The observable preclinical structure changes provides an opportunity for AD early detection using image classification tools, like convolutional neural network (CNN). However, currently most AD related studies were limited by sample size. Finding an efficient way to train image classifier on limited data is critical. In our project, we explored different transfer-learning methods based on CNN for AD prediction brain structure MRI image. We find that both pretrained 2D AlexNet with 2D-representation method and simple neural network with pretrained 3D autoencoder improved the prediction performance comparing to a deep CNN trained from scratch. The pretrained 2D AlexNet performed even better (**86%**) than the 3D CNN with autoencoder (**77%**).  ## Method #### 1. Data In this project, we used public brain MRI data from **Alzheimers Disease Neuroimaging Initiative (ADNI)** Study. ADNI is an ongoing, multicenter cohort study, started from 2004. It focuses on understanding the diagnostic and predictive value of Alzheimers disease specific biomarkers. The ADNI study has three phases: ADNI1, ADNI-GO, and ADNI2. Both ADNI1 and ADNI2 recruited new AD patients and normal control as research participants. Our data included a total of 686 structure MRI scans from both ADNI1 and ADNI2 phases, with 310 AD cases and 376 normal controls. We randomly derived the total sample into training dataset (n = 519), validation dataset (n = 100), and testing dataset (n = 67).  #### 2. Image preprocessing Image preprocessing were conducted using Statistical Parametric Mapping (SPM) software, version 12. The original MRI scans were first skull-stripped and segmented using segmentation algorithm based on 6-tissue probability mapping and then normalized to the International Consortium for Brain Mapping template of European brains using affine registration. Other configuration includes: bias, noise, and global intensity normalization. The standard preprocessing process output 3D image files with an uniform size of 121x145x121. Skull-stripping and normalization ensured the comparability between images by transforming the original brain image into a standard image space, so that same brain substructures can be aligned at same image coordinates for different participants. Diluted or enhanced intensity was used to compensate the structure changes. the In our project, we used both whole brain (including both grey matter and white matter) and grey matter only.  #### 3. AlexNet and Transfer Learning Convolutional Neural Networks (CNN) are very similar to ordinary Neural Networks. A CNN consists of an input and an output layer, as well as multiple hidden layers. The hidden layers are either convolutional, pooling or fully connected. ConvNet architectures make the explicit assumption that the inputs are images, which allows us to encode certain properties into the architecture. These then make the forward function more efficient to implement and vastly reduce the amount of parameters in the network.  #### 3.1. AlexNet The net contains eight layers with weights; the first five are convolutional and the remaining three are fully connected. The overall architecture is shown in Figure 1. The output of the last fully-connected layer is fed to a 1000-way softmax which produces a distribution over the 1000 class labels. AlexNet maximizes the multinomial logistic regression objective, which is equivalent to maximizing the average across training cases of the log-probability of the correct label under the prediction distribution. The kernels of the second, fourth, and fifth convolutional layers are connected only to those kernel maps in the previous layer which reside on the same GPU (as shown in Figure1). The kernels of the third convolutional layer are connected to all kernel maps in the second layer. The neurons in the fully connected layers are connected to all neurons in the previous layer. Response-normalization layers follow the first and second convolutional layers. Max-pooling layers follow both response-normalization layers as well as the fifth convolutional layer. The ReLU non-linearity is applied to the output of every convolutional and fully-connected layer. ![](images/f1.png)  The first convolutional layer filters the 224x224x3 input image with 96 kernels of size 11x11x3 with a stride of 4 pixels (this is the distance between the receptive field centers of neighboring neurons in a kernel map). The second convolutional layer takes as input the (response-normalized and pooled) output of the first convolutional layer and filters it with 256 kernels of size 5x5x48. The third, fourth, and fifth convolutional layers are connected to one another without any intervening pooling or normalization layers. The third convolutional layer has 384 kernels of size 3x3x256 connected to the (normalized, pooled) outputs of the second convolutional layer. The fourth convolutional layer has 384 kernels of size 3x3x192 , and the fifth convolutional layer has 256 kernels of size 3x3x192. The fully-connected layers have 4096 neurons each.  #### 3.2. Transfer Learning Training an entire Convolutional Network from scratch (with random initialization) is impractical[14] because it is relatively rare to have a dataset of sufficient size. An alternative is to pretrain a Conv-Net on a very large dataset (e.g. ImageNet), and then use the ConvNet either as an initialization or a fixed feature extractor for the task of interest. Typically, there are three major transfer learning scenarios:   **ConvNet as fixed feature extractor:** We can take a ConvNet pretrained on ImageNet, and remove the last fully-connected layer, then treat the rest structure as a fixed feature extractor for the target dataset. In AlexNet, this would be a 4096-D vector. Usually, we call these features as CNN codes. Once we get these features, we can train a linear classifier (e.g. linear SVM or Softmax classifier) for our target dataset.   **Fine-tuning the ConvNet:** Another idea is not only replace the last fully-connected layer in the classifier, but to also fine-tune the parameters of the pretrained network. Due to overfitting concerns, we can only fine-tune some higher-level part of the network. This suggestion is motivated by the observation that earlier features in a ConvNet contains more generic features (e.g. edge detectors or color blob detectors) that can be useful for many kind of tasks. But the later layer of the network becomes progressively more specific to the details of the classes contained in the original dataset.   **Pretrained models:** The released pretrained model is usually the final ConvNet checkpoint. So it is common to see people use the network for fine-tuning.  #### 4. 3D Autoencoder and Convolutional Neural Network We take a two-stage approach where we first train a 3D sparse autoencoder to learn filters for convolution operations, and then build a convolutional neural network whose first layer uses the filters learned with the autoencoder. ![](images/f2.png)  #### 4.1. Sparse Autoencoder An autoencoder is a 3-layer neural network that is used to extract features from an input such as an image. Sparse representations can provide a simple interpretation of the input data in terms of a small number of \parts by extracting the structure hidden in the data. The autoencoder has an input layer, a hidden layer and an output layer, and the input and output layers have same number of units, while the hidden layer contains more units for a sparse and overcomplete representation. The encoder function maps input x to representation h, and the decoder function maps the representation h to the output x. In our problem, we extract 3D patches from scans as the input to the network. The decoder function aims to reconstruct the input form the hidden representation h.  #### 4.2. 3D Convolutional Neural Network Training the 3D convolutional neural network(CNN) is the second stage. The CNN we use in this project has one convolutional layer, one pooling layer, two linear layers, and finally a log softmax layer. After training the sparse autoencoder, we take the weights and biases of the encoder from trained model, and use them a 3D filter of a 3D convolutional layer of the 1-layer convolutional neural network. Figure 2 shows the architecture of the network.  #### 5. Tools In this project, we used Nibabel for MRI image processing and PyTorch Neural Networks implementation.
  </content>
 </entry>
 <entry>
  <title>amigoscode: python-intuit-quickbooks-project</title>
  <author>
   <name>amigoscode</name>
  </author>
  <link href="https://github.com/amigoscode/python-intuit-quickbooks-project" />
  <id>urn:rprimus:github:amigoscode:python-intuit-quickbooks-project</id>
  <published>2020-11-17T03:29:15Z</published>
  <updated>2020-11-17T03:29:15Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>DaniellTa: kahootcheat</title>
  <author>
   <name>DaniellTa</name>
  </author>
  <link href="https://github.com/DaniellTa/kahootcheat" />
  <id>urn:rprimus:github:DaniellTa:kahootcheat</id>
  <published>2020-11-17T03:13:52Z</published>
  <updated>2020-11-17T03:13:52Z</updated>
  <content type="html">
   Find answers to kahoots by game id
  </content>
 </entry>
 <entry>
  <title>aliyun: alibabacloud-console-bench-python-sdk</title>
  <author>
   <name>aliyun</name>
  </author>
  <link href="https://github.com/aliyun/alibabacloud-console-bench-python-sdk" />
  <id>urn:rprimus:github:aliyun:alibabacloud-console-bench-python-sdk</id>
  <published>2020-11-17T03:08:32Z</published>
  <updated>2020-11-17T03:08:32Z</updated>
  <content type="html">
   alibabacloud-console-bench-python-sdk
  </content>
 </entry>
 <entry>
  <title>wp2333: Water_Meter_Reading_Recognition</title>
  <author>
   <name>wp2333</name>
  </author>
  <link href="https://github.com/wp2333/Water_Meter_Reading_Recognition" />
  <id>urn:rprimus:github:wp2333:Water_Meter_Reading_Recognition</id>
  <published>2020-11-17T02:56:53Z</published>
  <updated>2020-11-17T02:56:53Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ojayyezzir: pytenet</title>
  <author>
   <name>ojayyezzir</name>
  </author>
  <link href="https://github.com/ojayyezzir/pytenet" />
  <id>urn:rprimus:github:ojayyezzir:pytenet</id>
  <published>2020-11-17T02:52:05Z</published>
  <updated>2020-11-17T02:52:05Z</updated>
  <content type="html">
   â®ï¸ Donât try to understand it. Feel it.
  </content>
 </entry>
 <entry>
  <title>Vishal-sudo31: Number-theory-programs</title>
  <author>
   <name>Vishal-sudo31</name>
  </author>
  <link href="https://github.com/Vishal-sudo31/Number-theory-programs" />
  <id>urn:rprimus:github:Vishal-sudo31:Number-theory-programs</id>
  <published>2020-11-17T02:38:01Z</published>
  <updated>2020-11-17T02:38:01Z</updated>
  <content type="html">
   Number theory concepts has been implemented in python programs
  </content>
 </entry>
 <entry>
  <title>yutushe: XMLY</title>
  <author>
   <name>yutushe</name>
  </author>
  <link href="https://github.com/yutushe/XMLY" />
  <id>urn:rprimus:github:yutushe:XMLY</id>
  <published>2020-11-17T02:08:39Z</published>
  <updated>2020-11-17T02:08:39Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>GB-png: ximalaya</title>
  <author>
   <name>GB-png</name>
  </author>
  <link href="https://github.com/GB-png/ximalaya" />
  <id>urn:rprimus:github:GB-png:ximalaya</id>
  <published>2020-11-17T02:07:42Z</published>
  <updated>2020-11-17T02:07:42Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>lasscat: namemcpy</title>
  <author>
   <name>lasscat</name>
  </author>
  <link href="https://github.com/lasscat/namemcpy" />
  <id>urn:rprimus:github:lasscat:namemcpy</id>
  <published>2020-11-17T01:09:07Z</published>
  <updated>2020-11-17T01:09:07Z</updated>
  <content type="html">
   Namemc api wrapper made in python
  </content>
 </entry>
 <entry>
  <title>a-isha: fm1115</title>
  <author>
   <name>a-isha</name>
  </author>
  <link href="https://github.com/a-isha/fm1115" />
  <id>urn:rprimus:github:a-isha:fm1115</id>
  <published>2020-11-17T00:12:19Z</published>
  <updated>2020-11-17T00:12:19Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Jone2008: xmly</title>
  <author>
   <name>Jone2008</name>
  </author>
  <link href="https://github.com/Jone2008/xmly" />
  <id>urn:rprimus:github:Jone2008:xmly</id>
  <published>2020-11-17T00:02:29Z</published>
  <updated>2020-11-17T00:02:29Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>apple: ml-hypersim</title>
  <author>
   <name>apple</name>
  </author>
  <link href="https://github.com/apple/ml-hypersim" />
  <id>urn:rprimus:github:apple:ml-hypersim</id>
  <published>2020-11-16T21:46:50Z</published>
  <updated>2020-11-16T21:46:50Z</updated>
  <content type="html">
   The Hypersim Toolkit is a set of tools for generating photorealistic synthetic datasets from V-Ray scenes.
  </content>
 </entry>
 <entry>
  <title>jiupinjia: stylized-neural-painting</title>
  <author>
   <name>jiupinjia</name>
  </author>
  <link href="https://github.com/jiupinjia/stylized-neural-painting" />
  <id>urn:rprimus:github:jiupinjia:stylized-neural-painting</id>
  <published>2020-11-16T19:33:39Z</published>
  <updated>2020-11-16T19:33:39Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ZorrillosDev: watchit-gateway</title>
  <author>
   <name>ZorrillosDev</name>
  </author>
  <link href="https://github.com/ZorrillosDev/watchit-gateway" />
  <id>urn:rprimus:github:ZorrillosDev:watchit-gateway</id>
  <published>2020-11-16T19:21:01Z</published>
  <updated>2020-11-16T19:21:01Z</updated>
  <content type="html">
   IPFS gateway for watchit
  </content>
 </entry>
 <entry>
  <title>Seniatical: Orbits-Source-Code</title>
  <author>
   <name>Seniatical</name>
  </author>
  <link href="https://github.com/Seniatical/Orbits-Source-Code" />
  <id>urn:rprimus:github:Seniatical:Orbits-Source-Code</id>
  <published>2020-11-16T18:52:03Z</published>
  <updated>2020-11-16T18:52:03Z</updated>
  <content type="html">
   The home of the multi-purpose discord Bot ORBIT.
  </content>
 </entry>
 <entry>
  <title>UdayKiranPadhy: HandMade-Cryptography-With-XOR-Method</title>
  <author>
   <name>UdayKiranPadhy</name>
  </author>
  <link href="https://github.com/UdayKiranPadhy/HandMade-Cryptography-With-XOR-Method" />
  <id>urn:rprimus:github:UdayKiranPadhy:HandMade-Cryptography-With-XOR-Method</id>
  <published>2020-11-16T17:09:51Z</published>
  <updated>2020-11-16T17:09:51Z</updated>
  <content type="html">
   This is a self made cryptograph using XOR method
  </content>
 </entry>
 <entry>
  <title>qhduan: CPM-LM-TF2</title>
  <author>
   <name>qhduan</name>
  </author>
  <link href="https://github.com/qhduan/CPM-LM-TF2" />
  <id>urn:rprimus:github:qhduan:CPM-LM-TF2</id>
  <published>2020-11-16T17:01:02Z</published>
  <updated>2020-11-16T17:01:02Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>cello-ben: sandwich-bot</title>
  <author>
   <name>cello-ben</name>
  </author>
  <link href="https://github.com/cello-ben/sandwich-bot" />
  <id>urn:rprimus:github:cello-ben:sandwich-bot</id>
  <published>2020-11-16T17:00:41Z</published>
  <updated>2020-11-16T17:00:41Z</updated>
  <content type="html">
   A silly little bot that orders me a sandwich with Python and Selenium. This is not the complete bot, since I didn&#039;t want to put a whole bunch of personal information on the web, but hopefully it shows the basics of how to go about something like this. XPaths can be gotten with a web inspector.
  </content>
 </entry>
 <entry>
  <title>ROpdebee: SCARE</title>
  <author>
   <name>ROpdebee</name>
  </author>
  <link href="https://github.com/ROpdebee/SCARE" />
  <id>urn:rprimus:github:ROpdebee:SCARE</id>
  <published>2020-11-16T16:47:53Z</published>
  <updated>2020-11-16T16:47:53Z</updated>
  <content type="html">
   SCARE: Structural Changes in Ansible Role Evolution
  </content>
 </entry>
 <entry>
  <title>woosal1337: Chegg-PRO</title>
  <author>
   <name>woosal1337</name>
  </author>
  <link href="https://github.com/woosal1337/Chegg-PRO" />
  <id>urn:rprimus:github:woosal1337:Chegg-PRO</id>
  <published>2020-11-16T16:04:48Z</published>
  <updated>2020-11-16T16:04:48Z</updated>
  <content type="html">
   I have made a Chegg check questions for free BOT.
  </content>
 </entry>
 <entry>
  <title>hynespm: architecting_on_aws</title>
  <author>
   <name>hynespm</name>
  </author>
  <link href="https://github.com/hynespm/architecting_on_aws" />
  <id>urn:rprimus:github:hynespm:architecting_on_aws</id>
  <published>2020-11-16T15:32:08Z</published>
  <updated>2020-11-16T15:32:08Z</updated>
  <content type="html">
   Repository of code snippets I used as part of the Architecting on AWS I teach. Code snippets are for students.
  </content>
 </entry>
 <entry>
  <title>abhijithneilabraham: stupid-neural-calculator</title>
  <author>
   <name>abhijithneilabraham</name>
  </author>
  <link href="https://github.com/abhijithneilabraham/stupid-neural-calculator" />
  <id>urn:rprimus:github:abhijithneilabraham:stupid-neural-calculator</id>
  <published>2020-11-16T15:01:03Z</published>
  <updated>2020-11-16T15:01:03Z</updated>
  <content type="html">
   Neural networks learning to do simple math operations. Currently supporting addition
  </content>
 </entry>
 <entry>
  <title>safernandez666: IOC</title>
  <author>
   <name>safernandez666</name>
  </author>
  <link href="https://github.com/safernandez666/IOC" />
  <id>urn:rprimus:github:safernandez666:IOC</id>
  <published>2020-11-16T14:33:42Z</published>
  <updated>2020-11-16T14:33:42Z</updated>
  <content type="html">
   IoC&#039;s that are spoken in GitHub Twitter &amp; Blog&#039;s.
  </content>
 </entry>
 <entry>
  <title>vipul-sharma20: nvim-speech</title>
  <author>
   <name>vipul-sharma20</name>
  </author>
  <link href="https://github.com/vipul-sharma20/nvim-speech" />
  <id>urn:rprimus:github:vipul-sharma20:nvim-speech</id>
  <published>2020-11-16T14:20:42Z</published>
  <updated>2020-11-16T14:20:42Z</updated>
  <content type="html">
   Neovim plugin to record and convert speech to text.
  </content>
 </entry>
 <entry>
  <title>scroll: skinRivet</title>
  <author>
   <name>scroll</name>
  </author>
  <link href="https://github.com/scroll/skinRivet" />
  <id>urn:rprimus:github:scroll:skinRivet</id>
  <published>2020-11-16T14:07:22Z</published>
  <updated>2020-11-16T14:07:22Z</updated>
  <content type="html">
   Very fast and simple rivet-like solution for attaching objects to skinned meshes in Autodesk Maya
  </content>
 </entry>
 <entry>
  <title>FreshRicardo: MLP-implementation-with-numpy</title>
  <author>
   <name>FreshRicardo</name>
  </author>
  <link href="https://github.com/FreshRicardo/MLP-implementation-with-numpy" />
  <id>urn:rprimus:github:FreshRicardo:MLP-implementation-with-numpy</id>
  <published>2020-11-16T14:07:08Z</published>
  <updated>2020-11-16T14:07:08Z</updated>
  <content type="html">
   The implementation of a fully connected NN with pure numpy.
  </content>
 </entry>
 <entry>
  <title>allenXu317: mooc_comments</title>
  <author>
   <name>allenXu317</name>
  </author>
  <link href="https://github.com/allenXu317/mooc_comments" />
  <id>urn:rprimus:github:allenXu317:mooc_comments</id>
  <published>2020-11-16T13:31:29Z</published>
  <updated>2020-11-16T13:31:29Z</updated>
  <content type="html">
   cuebé¦ç»è´¸é¦é½ç»æµè´¸æå¤§å­¦ç¬¬ä¸ç·ç¥åç»çº¬
  </content>
 </entry>
 <entry>
  <title>marl2en: wittypi4python</title>
  <author>
   <name>marl2en</name>
  </author>
  <link href="https://github.com/marl2en/wittypi4python" />
  <id>urn:rprimus:github:marl2en:wittypi4python</id>
  <published>2020-11-16T13:27:57Z</published>
  <updated>2020-11-16T13:27:57Z</updated>
  <content type="html">
   a translation of the original software to a python library
  </content>
 </entry>
 <entry>
  <title>weihaox: InterpGaze</title>
  <author>
   <name>weihaox</name>
  </author>
  <link href="https://github.com/weihaox/InterpGaze" />
  <id>urn:rprimus:github:weihaox:InterpGaze</id>
  <published>2020-11-16T13:24:24Z</published>
  <updated>2020-11-16T13:24:24Z</updated>
  <content type="html">
   Code and Data For Controllable Continuous Gaze Redirection.
  </content>
 </entry>
 <entry>
  <title>MathieuLeocmach: dirdip</title>
  <author>
   <name>MathieuLeocmach</name>
  </author>
  <link href="https://github.com/MathieuLeocmach/dirdip" />
  <id>urn:rprimus:github:MathieuLeocmach:dirdip</id>
  <published>2020-11-16T11:33:32Z</published>
  <updated>2020-11-16T11:33:32Z</updated>
  <content type="html">
   Implementation of Graner, F., Dollet, B., Raufaste, C. &amp; Marmottant, P. Discrete rearranging disordered patterns, part I: Robust statistical tools in two or three dimensions. Eur. Phys. J. E 25, 349â369 (2008)
  </content>
 </entry>
 <entry>
  <title>kyusbok: Video2ShopExactMatching</title>
  <author>
   <name>kyusbok</name>
  </author>
  <link href="https://github.com/kyusbok/Video2ShopExactMatching" />
  <id>urn:rprimus:github:kyusbok:Video2ShopExactMatching</id>
  <published>2020-11-16T10:36:20Z</published>
  <updated>2020-11-16T10:36:20Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>wealeson1: FBbypass</title>
  <author>
   <name>wealeson1</name>
  </author>
  <link href="https://github.com/wealeson1/FBbypass" />
  <id>urn:rprimus:github:wealeson1:FBbypass</id>
  <published>2020-11-16T09:52:41Z</published>
  <updated>2020-11-16T09:52:41Z</updated>
  <content type="html">
   403 Bypass
  </content>
 </entry>
 <entry>
  <title>townim-faisal: Flask-basic-API-with-Docker</title>
  <author>
   <name>townim-faisal</name>
  </author>
  <link href="https://github.com/townim-faisal/Flask-basic-API-with-Docker" />
  <id>urn:rprimus:github:townim-faisal:Flask-basic-API-with-Docker</id>
  <published>2020-11-16T08:36:09Z</published>
  <updated>2020-11-16T08:36:09Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>m3hrdadfi: wiki-summary</title>
  <author>
   <name>m3hrdadfi</name>
  </author>
  <link href="https://github.com/m3hrdadfi/wiki-summary" />
  <id>urn:rprimus:github:m3hrdadfi:wiki-summary</id>
  <published>2020-11-16T07:11:35Z</published>
  <updated>2020-11-16T07:11:35Z</updated>
  <content type="html">
   A Bert2Bert model which able to summarize articles!
  </content>
 </entry>
 <entry>
  <title>timwhitez: Frog-Fp</title>
  <author>
   <name>timwhitez</name>
  </author>
  <link href="https://github.com/timwhitez/Frog-Fp" />
  <id>urn:rprimus:github:timwhitez:Frog-Fp</id>
  <published>2020-11-16T05:53:20Z</published>
  <updated>2020-11-16T05:53:20Z</updated>
  <content type="html">
   ð¸fingerprint detect framework æ¹éæ·±åº¦æçº¹è¯å«æ¡æ¶
  </content>
 </entry>
 <entry>
  <title>vixrant: python-type-theory</title>
  <author>
   <name>vixrant</name>
  </author>
  <link href="https://github.com/vixrant/python-type-theory" />
  <id>urn:rprimus:github:vixrant:python-type-theory</id>
  <published>2020-11-16T05:10:27Z</published>
  <updated>2020-11-16T05:10:27Z</updated>
  <content type="html">
   My experiment on adding refinement types and dependent types to Python
  </content>
 </entry>
 <entry>
  <title>serant: lenspy</title>
  <author>
   <name>serant</name>
  </author>
  <link href="https://github.com/serant/lenspy" />
  <id>urn:rprimus:github:serant:lenspy</id>
  <published>2020-11-16T03:41:36Z</published>
  <updated>2020-11-16T03:41:36Z</updated>
  <content type="html">
   Plot millions of data points
  </content>
 </entry>
 <entry>
  <title>ClarenceSarmiento: AgeCalculator</title>
  <author>
   <name>ClarenceSarmiento</name>
  </author>
  <link href="https://github.com/ClarenceSarmiento/AgeCalculator" />
  <id>urn:rprimus:github:ClarenceSarmiento:AgeCalculator</id>
  <published>2020-11-16T03:16:53Z</published>
  <updated>2020-11-16T03:16:53Z</updated>
  <content type="html">
   Age Calculator Updated
  </content>
 </entry>
 <entry>
  <title>hengkang1: Dynamics-Calulations</title>
  <author>
   <name>hengkang1</name>
  </author>
  <link href="https://github.com/hengkang1/Dynamics-Calulations" />
  <id>urn:rprimus:github:hengkang1:Dynamics-Calulations</id>
  <published>2020-11-16T02:21:22Z</published>
  <updated>2020-11-16T02:21:22Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>akbar-amin: tradier-ticks</title>
  <author>
   <name>akbar-amin</name>
  </author>
  <link href="https://github.com/akbar-amin/tradier-ticks" />
  <id>urn:rprimus:github:akbar-amin:tradier-ticks</id>
  <published>2020-11-16T02:14:24Z</published>
  <updated>2020-11-16T02:14:24Z</updated>
  <content type="html">
   Script for extracting historical tick data from Tradier&#039;s Brokerage API
  </content>
 </entry>
 <entry>
  <title>adindrabkin: rdfgs-mapper</title>
  <author>
   <name>adindrabkin</name>
  </author>
  <link href="https://github.com/adindrabkin/rdfgs-mapper" />
  <id>urn:rprimus:github:adindrabkin:rdfgs-mapper</id>
  <published>2020-11-16T01:01:19Z</published>
  <updated>2020-11-16T01:01:19Z</updated>
  <content type="html">
   A tool to map rdforum.org RDFGS based on a provided route
  </content>
 </entry>
 <entry>
  <title>bergdahl: CircuitPython_MagTag_Sensor_Example</title>
  <author>
   <name>bergdahl</name>
  </author>
  <link href="https://github.com/bergdahl/CircuitPython_MagTag_Sensor_Example" />
  <id>urn:rprimus:github:bergdahl:CircuitPython_MagTag_Sensor_Example</id>
  <published>2020-11-15T22:10:53Z</published>
  <updated>2020-11-15T22:10:53Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ctoANG: Account-Checker-template</title>
  <author>
   <name>ctoANG</name>
  </author>
  <link href="https://github.com/ctoANG/Account-Checker-template" />
  <id>urn:rprimus:github:ctoANG:Account-Checker-template</id>
  <published>2020-11-15T18:57:17Z</published>
  <updated>2020-11-15T18:57:17Z</updated>
  <content type="html">
   A simple account checker template Enjoy 
  </content>
 </entry>
 <entry>
  <title>RafhaanShah: Reddit-Post-Notifier</title>
  <author>
   <name>RafhaanShah</name>
  </author>
  <link href="https://github.com/RafhaanShah/Reddit-Post-Notifier" />
  <id>urn:rprimus:github:RafhaanShah:Reddit-Post-Notifier</id>
  <published>2020-11-15T17:48:20Z</published>
  <updated>2020-11-15T17:48:20Z</updated>
  <content type="html">
   Get notified of new Reddit posts matching your search criteria
  </content>
 </entry>
 <entry>
  <title>cole-wilson: nought</title>
  <author>
   <name>cole-wilson</name>
  </author>
  <link href="https://github.com/cole-wilson/nought" />
  <id>urn:rprimus:github:cole-wilson:nought</id>
  <published>2020-11-15T17:47:47Z</published>
  <updated>2020-11-15T17:47:47Z</updated>
  <content type="html">
   A super customizable file cleaner/organizer/automator.
  </content>
 </entry>
 <entry>
  <title>decompetition: challenges-2020</title>
  <author>
   <name>decompetition</name>
  </author>
  <link href="https://github.com/decompetition/challenges-2020" />
  <id>urn:rprimus:github:decompetition:challenges-2020</id>
  <published>2020-11-15T17:37:30Z</published>
  <updated>2020-11-15T17:37:30Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Sl-Sanda-Ru: x265LK-CLI</title>
  <author>
   <name>Sl-Sanda-Ru</name>
  </author>
  <link href="https://github.com/Sl-Sanda-Ru/x265LK-CLI" />
  <id>urn:rprimus:github:Sl-Sanda-Ru:x265LK-CLI</id>
  <published>2020-11-15T15:32:10Z</published>
  <updated>2020-11-15T15:32:10Z</updated>
  <content type="html">
   Command Line Version For www.x265lk.com
  </content>
 </entry>
 <entry>
  <title>zbnio: zbn</title>
  <author>
   <name>zbnio</name>
  </author>
  <link href="https://github.com/zbnio/zbn" />
  <id>urn:rprimus:github:zbnio:zbn</id>
  <published>2020-11-15T15:14:21Z</published>
  <updated>2020-11-15T15:14:21Z</updated>
  <content type="html">
   å®å¨ç¼æä¸èªå¨åååºå¹³å°
  </content>
 </entry>
 <entry>
  <title>avinash3699: Shutdown-Restart-Logout-Windows-Python</title>
  <author>
   <name>avinash3699</name>
  </author>
  <link href="https://github.com/avinash3699/Shutdown-Restart-Logout-Windows-Python" />
  <id>urn:rprimus:github:avinash3699:Shutdown-Restart-Logout-Windows-Python</id>
  <published>2020-11-15T15:10:06Z</published>
  <updated>2020-11-15T15:10:06Z</updated>
  <content type="html">
   This is a Python Program used to Shutdown, Restart and Logout Windows Computer as easy as the traditional method. It has a GUI which makes it easy to do the operations. It also asks for a confirmation before executing any of the operations to avoid wrong oprations due to carelessness.
  </content>
 </entry>
 <entry>
  <title>Fengdalu: learn-an-effective-lip-reading-model-without-pains</title>
  <author>
   <name>Fengdalu</name>
  </author>
  <link href="https://github.com/Fengdalu/learn-an-effective-lip-reading-model-without-pains" />
  <id>urn:rprimus:github:Fengdalu:learn-an-effective-lip-reading-model-without-pains</id>
  <published>2020-11-15T15:05:17Z</published>
  <updated>2020-11-15T15:05:17Z</updated>
  <content type="html">
   The PyTorch Code and Model In &quot;Learn an Effective Lip Reading Model without Pains&quot;, (https://arxiv.org/abs/2011.07557), which reaches the state-of-art performance in LRW-1000 dataset.
  </content>
 </entry>
 <entry>
  <title>BOBtheROSS: StreetGenFromEdges</title>
  <author>
   <name>BOBtheROSS</name>
  </author>
  <link href="https://github.com/BOBtheROSS/StreetGenFromEdges" />
  <id>urn:rprimus:github:BOBtheROSS:StreetGenFromEdges</id>
  <published>2020-11-15T14:55:22Z</published>
  <updated>2020-11-15T14:55:22Z</updated>
  <content type="html">
   This Blender script generates street like geometry from the edges of a user created base mesh object
  </content>
 </entry>
 <entry>
  <title>Stonzyy: NSR</title>
  <author>
   <name>Stonzyy</name>
  </author>
  <link href="https://github.com/Stonzyy/NSR" />
  <id>urn:rprimus:github:Stonzyy:NSR</id>
  <published>2020-11-15T14:46:28Z</published>
  <updated>2020-11-15T14:46:28Z</updated>
  <content type="html">
   NSR Standard To Nasser Security Researcher , Usage For web Recon and  Enumeration
  </content>
 </entry>
 <entry>
  <title>Ak-Shaw: text-to-handwriting-script</title>
  <author>
   <name>Ak-Shaw</name>
  </author>
  <link href="https://github.com/Ak-Shaw/text-to-handwriting-script" />
  <id>urn:rprimus:github:Ak-Shaw:text-to-handwriting-script</id>
  <published>2020-11-15T14:43:05Z</published>
  <updated>2020-11-15T14:43:05Z</updated>
  <content type="html">
   This repo contains a few scripts that automate the usage of an app that converts text to handwriting!
  </content>
 </entry>
 <entry>
  <title>VictorWesterlund: labylib-animated-textures</title>
  <author>
   <name>VictorWesterlund</name>
  </author>
  <link href="https://github.com/VictorWesterlund/labylib-animated-textures" />
  <id>urn:rprimus:github:VictorWesterlund:labylib-animated-textures</id>
  <published>2020-11-15T14:38:33Z</published>
  <updated>2020-11-15T14:38:33Z</updated>
  <content type="html">
   Animated cosmetics for LabyMod.
  </content>
 </entry>
 <entry>
  <title>H3LLO-H4CK3R-2: WA-BOOMB-BOT</title>
  <author>
   <name>H3LLO-H4CK3R-2</name>
  </author>
  <link href="https://github.com/H3LLO-H4CK3R-2/WA-BOOMB-BOT" />
  <id>urn:rprimus:github:H3LLO-H4CK3R-2:WA-BOOMB-BOT</id>
  <published>2020-11-15T14:36:57Z</published>
  <updated>2020-11-15T14:36:57Z</updated>
  <content type="html">
   [ Bot made by selenium ] You want to install wedriver and selenium to run this tool You can BOOMB WHATSAPP using this tool [ this tool will not work on TERMUX ]  ðððð
  </content>
 </entry>
 <entry>
  <title>sajjat-ahmed: Python-Concepts</title>
  <author>
   <name>sajjat-ahmed</name>
  </author>
  <link href="https://github.com/sajjat-ahmed/Python-Concepts" />
  <id>urn:rprimus:github:sajjat-ahmed:Python-Concepts</id>
  <published>2020-11-15T14:15:17Z</published>
  <updated>2020-11-15T14:15:17Z</updated>
  <content type="html">
   Basic Python Concepts
  </content>
 </entry>
 <entry>
  <title>lonePatient: NeZha_Chinese_PyTorch</title>
  <author>
   <name>lonePatient</name>
  </author>
  <link href="https://github.com/lonePatient/NeZha_Chinese_PyTorch" />
  <id>urn:rprimus:github:lonePatient:NeZha_Chinese_PyTorch</id>
  <published>2020-11-15T13:11:46Z</published>
  <updated>2020-11-15T13:11:46Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>CVUsers: Smart-Retail-By-Efficientdet</title>
  <author>
   <name>CVUsers</name>
  </author>
  <link href="https://github.com/CVUsers/Smart-Retail-By-Efficientdet" />
  <id>urn:rprimus:github:CVUsers:Smart-Retail-By-Efficientdet</id>
  <published>2020-11-15T12:13:46Z</published>
  <updated>2020-11-15T12:13:46Z</updated>
  <content type="html">
     Use efficientdet - Python version to realize intelligent retail model training, provide data sets and trained model files ~ welcome starä½¿ç¨Efficientdet -pytorchçå®ç°æºè½é¶å®æ¨¡åè®­ç»ï¼æä¾æ°æ®éä¸è®­ç»å¥½çæ¨¡åæä»¶~æ¬¢è¿star
  </content>
 </entry>
 <entry>
  <title>XiaoTianCan: DATE_exp</title>
  <author>
   <name>XiaoTianCan</name>
  </author>
  <link href="https://github.com/XiaoTianCan/DATE_exp" />
  <id>urn:rprimus:github:XiaoTianCan:DATE_exp</id>
  <published>2020-11-15T11:52:25Z</published>
  <updated>2020-11-15T11:52:25Z</updated>
  <content type="html">
   DATE system based on Mininet
  </content>
 </entry>
 <entry>
  <title>teamssix: src_notice</title>
  <author>
   <name>teamssix</name>
  </author>
  <link href="https://github.com/teamssix/src_notice" />
  <id>urn:rprimus:github:teamssix:src_notice</id>
  <published>2020-11-15T11:14:33Z</published>
  <updated>2020-11-15T11:14:33Z</updated>
  <content type="html">
   ç¬ååå¤§ SRC åå®¶çå¬åï¼å¯¹æ°å¬åè¿è¡å¾®ä¿¡æéï¼ä¾¿äºåæ¶ç¥éåªå®¶ææ°çæ´»å¨ä¸å¬å
  </content>
 </entry>
 <entry>
  <title>umutambyi-gad: Play-my-songs</title>
  <author>
   <name>umutambyi-gad</name>
  </author>
  <link href="https://github.com/umutambyi-gad/Play-my-songs" />
  <id>urn:rprimus:github:umutambyi-gad:Play-my-songs</id>
  <published>2020-11-15T10:47:32Z</published>
  <updated>2020-11-15T10:47:32Z</updated>
  <content type="html">
   Python script for play songs from local playlist
  </content>
 </entry>
 <entry>
  <title>SelfExplainML: Aletheia</title>
  <author>
   <name>SelfExplainML</name>
  </author>
  <link href="https://github.com/SelfExplainML/Aletheia" />
  <id>urn:rprimus:github:SelfExplainML:Aletheia</id>
  <published>2020-11-15T10:15:48Z</published>
  <updated>2020-11-15T10:15:48Z</updated>
  <content type="html">
   Unwrapping Black Box of ReLU DNNs
  </content>
 </entry>
 <entry>
  <title>lsh3163: Jarvis</title>
  <author>
   <name>lsh3163</name>
  </author>
  <link href="https://github.com/lsh3163/Jarvis" />
  <id>urn:rprimus:github:lsh3163:Jarvis</id>
  <published>2020-11-15T10:04:51Z</published>
  <updated>2020-11-15T10:04:51Z</updated>
  <content type="html">
   Iron man Jarvis Chatbot Project
  </content>
 </entry>
 <entry>
  <title>flobz: psa_car_controller</title>
  <author>
   <name>flobz</name>
  </author>
  <link href="https://github.com/flobz/psa_car_controller" />
  <id>urn:rprimus:github:flobz:psa_car_controller</id>
  <published>2020-11-15T08:18:49Z</published>
  <updated>2020-11-15T08:18:49Z</updated>
  <content type="html">
   control a psa car with connected_car v4 api. Using android app to retrieve credentials.
  </content>
 </entry>
 <entry>
  <title>gitfarhan: chat_analytics</title>
  <author>
   <name>gitfarhan</name>
  </author>
  <link href="https://github.com/gitfarhan/chat_analytics" />
  <id>urn:rprimus:github:gitfarhan:chat_analytics</id>
  <published>2020-11-15T07:58:06Z</published>
  <updated>2020-11-15T07:58:06Z</updated>
  <content type="html">
   A python CLI to summarize and visualize the number of question marks of a given Whatsapp chat history
  </content>
 </entry>
 <entry>
  <title>junshutang: EGGAN</title>
  <author>
   <name>junshutang</name>
  </author>
  <link href="https://github.com/junshutang/EGGAN" />
  <id>urn:rprimus:github:junshutang:EGGAN</id>
  <published>2020-11-15T07:33:29Z</published>
  <updated>2020-11-15T07:33:29Z</updated>
  <content type="html">
   Fine-Grained Expression Manipulation via Structured Latent Space(ICME2020)
  </content>
 </entry>
 <entry>
  <title>sipa: safegcd-bounds</title>
  <author>
   <name>sipa</name>
  </author>
  <link href="https://github.com/sipa/safegcd-bounds" />
  <id>urn:rprimus:github:sipa:safegcd-bounds</id>
  <published>2020-11-15T03:57:42Z</published>
  <updated>2020-11-15T03:57:42Z</updated>
  <content type="html">
   Bounds on divsteps iterations in safegcd
  </content>
 </entry>
 <entry>
  <title>clayreinhardt: AlgoVisualizer</title>
  <author>
   <name>clayreinhardt</name>
  </author>
  <link href="https://github.com/clayreinhardt/AlgoVisualizer" />
  <id>urn:rprimus:github:clayreinhardt:AlgoVisualizer</id>
  <published>2020-11-15T03:05:35Z</published>
  <updated>2020-11-15T03:05:35Z</updated>
  <content type="html">
   Shortest-path algorithm game (A-star) 
  </content>
 </entry>
 <entry>
  <title>terror: usernames</title>
  <author>
   <name>terror</name>
  </author>
  <link href="https://github.com/terror/usernames" />
  <id>urn:rprimus:github:terror:usernames</id>
  <published>2020-11-15T01:15:53Z</published>
  <updated>2020-11-15T01:15:53Z</updated>
  <content type="html">
   rare inactive github usernames!
  </content>
 </entry>
 <entry>
  <title>pushshift: US_Election_Data</title>
  <author>
   <name>pushshift</name>
  </author>
  <link href="https://github.com/pushshift/US_Election_Data" />
  <id>urn:rprimus:github:pushshift:US_Election_Data</id>
  <published>2020-11-15T00:13:51Z</published>
  <updated>2020-11-15T00:13:51Z</updated>
  <content type="html">
   Code to grab election data from CNN&#039;s election data API
  </content>
 </entry>
 <entry>
  <title>813492291816: BitChan</title>
  <author>
   <name>813492291816</name>
  </author>
  <link href="https://github.com/813492291816/BitChan" />
  <id>urn:rprimus:github:813492291816:BitChan</id>
  <published>2020-11-15T00:09:13Z</published>
  <updated>2020-11-15T00:09:13Z</updated>
  <content type="html">
   BitChan is a decentralized anonymous image board inspired by BitBoard and built on top of BitMessage with Tor and GnuGP.
  </content>
 </entry>
</feed>
