<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-python.atom"/>
<id>urn:rprimus:github:newpythonrepos</id>
<updated>2020-11-19T10:03:50Z</updated>
<title type='text'>New GitHub Python Repos</title>
 <entry>
  <title>the-coding-pie: web_scraper</title>
  <author>
   <name>the-coding-pie</name>
  </author>
  <link href="https://github.com/the-coding-pie/web_scraper" />
  <id>urn:rprimus:github:the-coding-pie:web_scraper</id>
  <published>2020-11-19T10:03:50Z</published>
  <updated>2020-11-19T10:03:50Z</updated>
  <content type="html">
   A simple web scraper built using Python, BeautifulSoup4, requests, and csv module. For complete tutorial visit https://thecodingpie.com
  </content>
 </entry>
 <entry>
  <title>coderefinery: forking-workflow-exercise-nov</title>
  <author>
   <name>coderefinery</name>
  </author>
  <link href="https://github.com/coderefinery/forking-workflow-exercise-nov" />
  <id>urn:rprimus:github:coderefinery:forking-workflow-exercise-nov</id>
  <published>2020-11-19T09:49:51Z</published>
  <updated>2020-11-19T09:49:51Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>hpc203: convertyaml2py</title>
  <author>
   <name>hpc203</name>
  </author>
  <link href="https://github.com/hpc203/convertyaml2py" />
  <id>urn:rprimus:github:hpc203:convertyaml2py</id>
  <published>2020-11-19T09:09:14Z</published>
  <updated>2020-11-19T09:09:14Z</updated>
  <content type="html">
   yolov5.yamlè½¬æ¢æyolov5.py
  </content>
 </entry>
 <entry>
  <title>1994nikunj: Freelancing_project1</title>
  <author>
   <name>1994nikunj</name>
  </author>
  <link href="https://github.com/1994nikunj/Freelancing_project1" />
  <id>urn:rprimus:github:1994nikunj:Freelancing_project1</id>
  <published>2020-11-19T08:50:48Z</published>
  <updated>2020-11-19T08:50:48Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Jayanthreddyputalapattu: typing-speed-game</title>
  <author>
   <name>Jayanthreddyputalapattu</name>
  </author>
  <link href="https://github.com/Jayanthreddyputalapattu/typing-speed-game" />
  <id>urn:rprimus:github:Jayanthreddyputalapattu:typing-speed-game</id>
  <published>2020-11-19T08:37:03Z</published>
  <updated>2020-11-19T08:37:03Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>tandy1229: .config</title>
  <author>
   <name>tandy1229</name>
  </author>
  <link href="https://github.com/tandy1229/.config" />
  <id>urn:rprimus:github:tandy1229:.config</id>
  <published>2020-11-19T08:30:40Z</published>
  <updated>2020-11-19T08:30:40Z</updated>
  <content type="html">
   my .config files
  </content>
 </entry>
 <entry>
  <title>ManoVikram: YouTube-Downloader</title>
  <author>
   <name>ManoVikram</name>
  </author>
  <link href="https://github.com/ManoVikram/YouTube-Downloader" />
  <id>urn:rprimus:github:ManoVikram:YouTube-Downloader</id>
  <published>2020-11-19T07:59:36Z</published>
  <updated>2020-11-19T07:59:36Z</updated>
  <content type="html">
   This script helps you to download YouTube video and audio.
  </content>
 </entry>
 <entry>
  <title>jack-madison: Marketing-to-Physicians</title>
  <author>
   <name>jack-madison</name>
  </author>
  <link href="https://github.com/jack-madison/Marketing-to-Physicians" />
  <id>urn:rprimus:github:jack-madison:Marketing-to-Physicians</id>
  <published>2020-11-19T07:17:28Z</published>
  <updated>2020-11-19T07:17:28Z</updated>
  <content type="html">
   Jack Madison&#039;s Economics Honours Thesis
  </content>
 </entry>
 <entry>
  <title>C0NKER: fuzzy-systems</title>
  <author>
   <name>C0NKER</name>
  </author>
  <link href="https://github.com/C0NKER/fuzzy-systems" />
  <id>urn:rprimus:github:C0NKER:fuzzy-systems</id>
  <published>2020-11-19T06:56:37Z</published>
  <updated>2020-11-19T06:56:37Z</updated>
  <content type="html">
   Proyect of Simulation subject, about fuzzy systems
  </content>
 </entry>
 <entry>
  <title>17nicolel: wish-analysis-</title>
  <author>
   <name>17nicolel</name>
  </author>
  <link href="https://github.com/17nicolel/wish-analysis-" />
  <id>urn:rprimus:github:17nicolel:wish-analysis-</id>
  <published>2020-11-19T06:51:42Z</published>
  <updated>2020-11-19T06:51:42Z</updated>
  <content type="html">
   Forecasting product units sold on Wish using Machine Learning
  </content>
 </entry>
 <entry>
  <title>ziyonglixian: huitie</title>
  <author>
   <name>ziyonglixian</name>
  </author>
  <link href="https://github.com/ziyonglixian/huitie" />
  <id>urn:rprimus:github:ziyonglixian:huitie</id>
  <published>2020-11-19T06:07:25Z</published>
  <updated>2020-11-19T06:07:25Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>TeamLEGENDX: LegendBOT</title>
  <author>
   <name>TeamLEGENDX</name>
  </author>
  <link href="https://github.com/TeamLEGENDX/LegendBOT" />
  <id>urn:rprimus:github:TeamLEGENDX:LegendBOT</id>
  <published>2020-11-19T06:03:03Z</published>
  <updated>2020-11-19T06:03:03Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>kaushalmistry: Audio-Books-Generator</title>
  <author>
   <name>kaushalmistry</name>
  </author>
  <link href="https://github.com/kaushalmistry/Audio-Books-Generator" />
  <id>urn:rprimus:github:kaushalmistry:Audio-Books-Generator</id>
  <published>2020-11-19T05:39:01Z</published>
  <updated>2020-11-19T05:39:01Z</updated>
  <content type="html">
   A small Python Project that would help to create an audio book of any pdf you want.
  </content>
 </entry>
 <entry>
  <title>Sir-Sauce: Tank_Control</title>
  <author>
   <name>Sir-Sauce</name>
  </author>
  <link href="https://github.com/Sir-Sauce/Tank_Control" />
  <id>urn:rprimus:github:Sir-Sauce:Tank_Control</id>
  <published>2020-11-19T05:11:01Z</published>
  <updated>2020-11-19T05:11:01Z</updated>
  <content type="html">
   MCE433 Tank_Control
  </content>
 </entry>
 <entry>
  <title>Tactika: PDXCodeAssignments</title>
  <author>
   <name>Tactika</name>
  </author>
  <link href="https://github.com/Tactika/PDXCodeAssignments" />
  <id>urn:rprimus:github:Tactika:PDXCodeAssignments</id>
  <published>2020-11-19T05:07:05Z</published>
  <updated>2020-11-19T05:07:05Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>stoir: EliminaBot</title>
  <author>
   <name>stoir</name>
  </author>
  <link href="https://github.com/stoir/EliminaBot" />
  <id>urn:rprimus:github:stoir:EliminaBot</id>
  <published>2020-11-19T05:04:41Z</published>
  <updated>2020-11-19T05:04:41Z</updated>
  <content type="html">
   A discord bot that automatically deletes messages from bots after X number of seconds in selected channels
  </content>
 </entry>
 <entry>
  <title>jusacuro: juancuevas</title>
  <author>
   <name>jusacuro</name>
  </author>
  <link href="https://github.com/jusacuro/juancuevas" />
  <id>urn:rprimus:github:jusacuro:juancuevas</id>
  <published>2020-11-19T04:54:00Z</published>
  <updated>2020-11-19T04:54:00Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>psathyanarayan: Moddle-Attendence-Automator</title>
  <author>
   <name>psathyanarayan</name>
  </author>
  <link href="https://github.com/psathyanarayan/Moddle-Attendence-Automator" />
  <id>urn:rprimus:github:psathyanarayan:Moddle-Attendence-Automator</id>
  <published>2020-11-19T04:07:58Z</published>
  <updated>2020-11-19T04:07:58Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Zyh716: TG_CRS_Code</title>
  <author>
   <name>Zyh716</name>
  </author>
  <link href="https://github.com/Zyh716/TG_CRS_Code" />
  <id>urn:rprimus:github:Zyh716:TG_CRS_Code</id>
  <published>2020-11-19T03:57:21Z</published>
  <updated>2020-11-19T03:57:21Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Jierui-Liu: ZTE_challenge_sort_top9</title>
  <author>
   <name>Jierui-Liu</name>
  </author>
  <link href="https://github.com/Jierui-Liu/ZTE_challenge_sort_top9" />
  <id>urn:rprimus:github:Jierui-Liu:ZTE_challenge_sort_top9</id>
  <published>2020-11-19T03:36:07Z</published>
  <updated>2020-11-19T03:36:07Z</updated>
  <content type="html">
   About 2020 ZTE_challenge_multi-target tracking - top9 Verearyé
  </content>
 </entry>
 <entry>
  <title>MitchellX: python-scripts</title>
  <author>
   <name>MitchellX</name>
  </author>
  <link href="https://github.com/MitchellX/python-scripts" />
  <id>urn:rprimus:github:MitchellX:python-scripts</id>
  <published>2020-11-19T03:19:10Z</published>
  <updated>2020-11-19T03:19:10Z</updated>
  <content type="html">
   archive some frequently-used python scripts
  </content>
 </entry>
 <entry>
  <title>zardus: ezmp</title>
  <author>
   <name>zardus</name>
  </author>
  <link href="https://github.com/zardus/ezmp" />
  <id>urn:rprimus:github:zardus:ezmp</id>
  <published>2020-11-19T02:41:31Z</published>
  <updated>2020-11-19T02:41:31Z</updated>
  <content type="html">
   Easy multiprocessing in python
  </content>
 </entry>
 <entry>
  <title>boblus: NER-from-scratch</title>
  <author>
   <name>boblus</name>
  </author>
  <link href="https://github.com/boblus/NER-from-scratch" />
  <id>urn:rprimus:github:boblus:NER-from-scratch</id>
  <published>2020-11-19T01:49:20Z</published>
  <updated>2020-11-19T01:49:20Z</updated>
  <content type="html">
   compiling a transformers NER from scratch
  </content>
 </entry>
 <entry>
  <title>Artanic30: WebCrawlerForNTYTimes</title>
  <author>
   <name>Artanic30</name>
  </author>
  <link href="https://github.com/Artanic30/WebCrawlerForNTYTimes" />
  <id>urn:rprimus:github:Artanic30:WebCrawlerForNTYTimes</id>
  <published>2020-11-19T01:42:48Z</published>
  <updated>2020-11-19T01:42:48Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>harry74sherman: PQ4</title>
  <author>
   <name>harry74sherman</name>
  </author>
  <link href="https://github.com/harry74sherman/PQ4" />
  <id>urn:rprimus:github:harry74sherman:PQ4</id>
  <published>2020-11-19T01:22:25Z</published>
  <updated>2020-11-19T01:22:25Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>SolarOven: Graph-Note</title>
  <author>
   <name>SolarOven</name>
  </author>
  <link href="https://github.com/SolarOven/Graph-Note" />
  <id>urn:rprimus:github:SolarOven:Graph-Note</id>
  <published>2020-11-19T01:09:12Z</published>
  <updated>2020-11-19T01:09:12Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>svakeczw: MachineLearning-Algorithm-Python</title>
  <author>
   <name>svakeczw</name>
  </author>
  <link href="https://github.com/svakeczw/MachineLearning-Algorithm-Python" />
  <id>urn:rprimus:github:svakeczw:MachineLearning-Algorithm-Python</id>
  <published>2020-11-19T01:01:12Z</published>
  <updated>2020-11-19T01:01:12Z</updated>
  <content type="html">
   Machine learning algorithm by python.
  </content>
 </entry>
 <entry>
  <title>Mau1401: ProyectoPlataformasAbiertas</title>
  <author>
   <name>Mau1401</name>
  </author>
  <link href="https://github.com/Mau1401/ProyectoPlataformasAbiertas" />
  <id>urn:rprimus:github:Mau1401:ProyectoPlataformasAbiertas</id>
  <published>2020-11-19T00:59:22Z</published>
  <updated>2020-11-19T00:59:22Z</updated>
  <content type="html">
   Proyectos de juegos en python para el curso de programaciÃ³n bajo plataformas abiertas
  </content>
 </entry>
 <entry>
  <title>aaronfox: Genetic-Algorithm-and-Niching-Variants</title>
  <author>
   <name>aaronfox</name>
  </author>
  <link href="https://github.com/aaronfox/Genetic-Algorithm-and-Niching-Variants" />
  <id>urn:rprimus:github:aaronfox:Genetic-Algorithm-and-Niching-Variants</id>
  <published>2020-11-19T00:41:34Z</published>
  <updated>2020-11-19T00:41:34Z</updated>
  <content type="html">
   Genetic Algorithms and their Niching Variants 
  </content>
 </entry>
 <entry>
  <title>uta-smile: MICCAI17_DeepCorrLearning</title>
  <author>
   <name>uta-smile</name>
  </author>
  <link href="https://github.com/uta-smile/MICCAI17_DeepCorrLearning" />
  <id>urn:rprimus:github:uta-smile:MICCAI17_DeepCorrLearning</id>
  <published>2020-11-19T00:27:34Z</published>
  <updated>2020-11-19T00:27:34Z</updated>
  <content type="html">
   This cotain codes for MICCAI&#039;17 paper
  </content>
 </entry>
 <entry>
  <title>sarjus: Python</title>
  <author>
   <name>sarjus</name>
  </author>
  <link href="https://github.com/sarjus/Python" />
  <id>urn:rprimus:github:sarjus:Python</id>
  <published>2020-11-18T23:18:23Z</published>
  <updated>2020-11-18T23:18:23Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>google-research: soft-dtw-divergences</title>
  <author>
   <name>google-research</name>
  </author>
  <link href="https://github.com/google-research/soft-dtw-divergences" />
  <id>urn:rprimus:github:google-research:soft-dtw-divergences</id>
  <published>2020-11-18T22:05:43Z</published>
  <updated>2020-11-18T22:05:43Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>nickjj: flask-secrets</title>
  <author>
   <name>nickjj</name>
  </author>
  <link href="https://github.com/nickjj/flask-secrets" />
  <id>urn:rprimus:github:nickjj:flask-secrets</id>
  <published>2020-11-18T22:04:34Z</published>
  <updated>2020-11-18T22:04:34Z</updated>
  <content type="html">
   A Flask CLI extension to generate random secret tokens.
  </content>
 </entry>
 <entry>
  <title>Drunknow: W2V</title>
  <author>
   <name>Drunknow</name>
  </author>
  <link href="https://github.com/Drunknow/W2V" />
  <id>urn:rprimus:github:Drunknow:W2V</id>
  <published>2020-11-18T21:50:47Z</published>
  <updated>2020-11-18T21:50:47Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>NIRAS-MHRA: IFC2BOT</title>
  <author>
   <name>NIRAS-MHRA</name>
  </author>
  <link href="https://github.com/NIRAS-MHRA/IFC2BOT" />
  <id>urn:rprimus:github:NIRAS-MHRA:IFC2BOT</id>
  <published>2020-11-18T20:08:56Z</published>
  <updated>2020-11-18T20:08:56Z</updated>
  <content type="html">
   IFC to BOT converter
  </content>
 </entry>
 <entry>
  <title>captain-woof: TunnelPy</title>
  <author>
   <name>captain-woof</name>
  </author>
  <link href="https://github.com/captain-woof/TunnelPy" />
  <id>urn:rprimus:github:captain-woof:TunnelPy</id>
  <published>2020-11-18T19:52:42Z</published>
  <updated>2020-11-18T19:52:42Z</updated>
  <content type="html">
   TunnelPy simply exposes any service, running internally in a network/host, to the outside, by creating a tunnel between a client on the outside, and any internal host in a network, by pivoting from/to a &#039;middle-man&#039; host that is accessible by the client from outside.
  </content>
 </entry>
 <entry>
  <title>grih9: temperature_log</title>
  <author>
   <name>grih9</name>
  </author>
  <link href="https://github.com/grih9/temperature_log" />
  <id>urn:rprimus:github:grih9:temperature_log</id>
  <published>2020-11-18T19:09:51Z</published>
  <updated>2020-11-18T19:09:51Z</updated>
  <content type="html">
   SPBSTU Project
  </content>
 </entry>
 <entry>
  <title>Molodejka: DiscordBotRobloxVersionNotify</title>
  <author>
   <name>Molodejka</name>
  </author>
  <link href="https://github.com/Molodejka/DiscordBotRobloxVersionNotify" />
  <id>urn:rprimus:github:Molodejka:DiscordBotRobloxVersionNotify</id>
  <published>2020-11-18T18:44:30Z</published>
  <updated>2020-11-18T18:44:30Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>hqyyqh888: DeepUnfolding_WMMSE</title>
  <author>
   <name>hqyyqh888</name>
  </author>
  <link href="https://github.com/hqyyqh888/DeepUnfolding_WMMSE" />
  <id>urn:rprimus:github:hqyyqh888:DeepUnfolding_WMMSE</id>
  <published>2020-11-18T14:06:20Z</published>
  <updated>2020-11-18T14:06:20Z</updated>
  <content type="html">
   This repository contains the entire code for our TWC work &quot;Iterative Algorithm Induced Deep-Unfolding Neural Networks: Precoding Design for Multiuser MIMO Systems&quot;, available at: https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=9246287 and has been accepted for publication in TWC.
  </content>
 </entry>
 <entry>
  <title>GamerStop: google-forms-finder</title>
  <author>
   <name>GamerStop</name>
  </author>
  <link href="https://github.com/GamerStop/google-forms-finder" />
  <id>urn:rprimus:github:GamerStop:google-forms-finder</id>
  <published>2020-11-18T13:49:43Z</published>
  <updated>2020-11-18T13:49:43Z</updated>
  <content type="html">
   A python program to find Google Forms forms - Made with â¥ by GamerStop#0069 .
  </content>
 </entry>
 <entry>
  <title>nshepperd: ode-gan-tf</title>
  <author>
   <name>nshepperd</name>
  </author>
  <link href="https://github.com/nshepperd/ode-gan-tf" />
  <id>urn:rprimus:github:nshepperd:ode-gan-tf</id>
  <published>2020-11-18T13:21:56Z</published>
  <updated>2020-11-18T13:21:56Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Haokai-Zhang: EasyMPS</title>
  <author>
   <name>Haokai-Zhang</name>
  </author>
  <link href="https://github.com/Haokai-Zhang/EasyMPS" />
  <id>urn:rprimus:github:Haokai-Zhang:EasyMPS</id>
  <published>2020-11-18T12:06:55Z</published>
  <updated>2020-11-18T12:06:55Z</updated>
  <content type="html">
   A pedagogical realization of MPS method.
  </content>
 </entry>
 <entry>
  <title>lushan88a: google_trans_new</title>
  <author>
   <name>lushan88a</name>
  </author>
  <link href="https://github.com/lushan88a/google_trans_new" />
  <id>urn:rprimus:github:lushan88a:google_trans_new</id>
  <published>2020-11-18T12:02:07Z</published>
  <updated>2020-11-18T12:02:07Z</updated>
  <content type="html">
   a simple tools for google translate api
  </content>
 </entry>
 <entry>
  <title>wuaalb: pytorch_template_audio</title>
  <author>
   <name>wuaalb</name>
  </author>
  <link href="https://github.com/wuaalb/pytorch_template_audio" />
  <id>urn:rprimus:github:wuaalb:pytorch_template_audio</id>
  <published>2020-11-18T11:56:48Z</published>
  <updated>2020-11-18T11:56:48Z</updated>
  <content type="html">
   Basic Pytorch template for audio projects
  </content>
 </entry>
 <entry>
  <title>okzhili: DIGIX_CV_TIME_TOP3</title>
  <author>
   <name>okzhili</name>
  </author>
  <link href="https://github.com/okzhili/DIGIX_CV_TIME_TOP3" />
  <id>urn:rprimus:github:okzhili:DIGIX_CV_TIME_TOP3</id>
  <published>2020-11-18T11:50:49Z</published>
  <updated>2020-11-18T11:50:49Z</updated>
  <content type="html">
   2020åä¸ºDIGIXå¨çæ ¡å­AIç®æ³ç²¾è±å¤§èµè®¡ç®æºè§è§èµéç¬¬ä¸åè§£å³æ¹æ¡
  </content>
 </entry>
 <entry>
  <title>redguardtoo: pyim-another-dict</title>
  <author>
   <name>redguardtoo</name>
  </author>
  <link href="https://github.com/redguardtoo/pyim-another-dict" />
  <id>urn:rprimus:github:redguardtoo:pyim-another-dict</id>
  <published>2020-11-18T11:40:48Z</published>
  <updated>2020-11-18T11:40:48Z</updated>
  <content type="html">
   ç¨æ¸åå¤§å­¦å¼æ¾ä¸­æè¯åºæ°æ®å»ºç«çpyim è¾å¥æ³]è¯åº. å·²åºäºè¯é¢ç»è®¡ä¿¡æ¯DFå¼(Document Frequency)ä¼å
  </content>
 </entry>
 <entry>
  <title>x-hezhang: wechat-robot</title>
  <author>
   <name>x-hezhang</name>
  </author>
  <link href="https://github.com/x-hezhang/wechat-robot" />
  <id>urn:rprimus:github:x-hezhang:wechat-robot</id>
  <published>2020-11-18T10:55:30Z</published>
  <updated>2020-11-18T10:55:30Z</updated>
  <content type="html">
   åéæ¶æ¯å°ä¼ä¸å¾®ä¿¡æºå¨äºº
  </content>
 </entry>
 <entry>
  <title>rodchenkov-sn: SMO</title>
  <author>
   <name>rodchenkov-sn</name>
  </author>
  <link href="https://github.com/rodchenkov-sn/SMO" />
  <id>urn:rprimus:github:rodchenkov-sn:SMO</id>
  <published>2020-11-18T10:55:03Z</published>
  <updated>2020-11-18T10:55:03Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Cl0udG0d: pppXray</title>
  <author>
   <name>Cl0udG0d</name>
  </author>
  <link href="https://github.com/Cl0udG0d/pppXray" />
  <id>urn:rprimus:github:Cl0udG0d:pppXray</id>
  <published>2020-11-18T10:12:13Z</published>
  <updated>2020-11-18T10:12:13Z</updated>
  <content type="html">
   Xrayæ¹éåèªå¨æ«æ
  </content>
 </entry>
 <entry>
  <title>bcwein: DAT540-EvolutionaryANN</title>
  <author>
   <name>bcwein</name>
  </author>
  <link href="https://github.com/bcwein/DAT540-EvolutionaryANN" />
  <id>urn:rprimus:github:bcwein:DAT540-EvolutionaryANN</id>
  <published>2020-11-18T09:44:03Z</published>
  <updated>2020-11-18T09:44:03Z</updated>
  <content type="html">
   Project in DAT540 for exploring evolutionary ANNs in OpenAI&#039;s cartpole environment.
  </content>
 </entry>
 <entry>
  <title>aditi17goel: Personal-Voice-Assistant-using-Python</title>
  <author>
   <name>aditi17goel</name>
  </author>
  <link href="https://github.com/aditi17goel/Personal-Voice-Assistant-using-Python" />
  <id>urn:rprimus:github:aditi17goel:Personal-Voice-Assistant-using-Python</id>
  <published>2020-11-18T08:15:04Z</published>
  <updated>2020-11-18T08:15:04Z</updated>
  <content type="html">
   A project to build a voice assistant using Python . The voice assistant interacts with the humans to perform basic tasks.
  </content>
 </entry>
 <entry>
  <title>lin-honghui: Huawei_DIGIX_ImageRetri_Top2</title>
  <author>
   <name>lin-honghui</name>
  </author>
  <link href="https://github.com/lin-honghui/Huawei_DIGIX_ImageRetri_Top2" />
  <id>urn:rprimus:github:lin-honghui:Huawei_DIGIX_ImageRetri_Top2</id>
  <published>2020-11-18T07:39:33Z</published>
  <updated>2020-11-18T07:39:33Z</updated>
  <content type="html">
   2020 DIGIX GLOBAL AI CHALLENGE - Digital Device Image Retrieval - Top2 WEAREé
  </content>
 </entry>
 <entry>
  <title>al-one: hass-miio-yeelink</title>
  <author>
   <name>al-one</name>
  </author>
  <link href="https://github.com/al-one/hass-miio-yeelink" />
  <id>urn:rprimus:github:al-one:hass-miio-yeelink</id>
  <published>2020-11-18T07:00:56Z</published>
  <updated>2020-11-18T07:00:56Z</updated>
  <content type="html">
   Xiaomi Miio For Yeelink devices
  </content>
 </entry>
 <entry>
  <title>mazdakpak: Pedestrain-Detection</title>
  <author>
   <name>mazdakpak</name>
  </author>
  <link href="https://github.com/mazdakpak/Pedestrain-Detection" />
  <id>urn:rprimus:github:mazdakpak:Pedestrain-Detection</id>
  <published>2020-11-18T06:56:07Z</published>
  <updated>2020-11-18T06:56:07Z</updated>
  <content type="html">
   Simple python-opencv script that detects pedestrain
  </content>
 </entry>
 <entry>
  <title>kesha1225: TypedCSV</title>
  <author>
   <name>kesha1225</name>
  </author>
  <link href="https://github.com/kesha1225/TypedCSV" />
  <id>urn:rprimus:github:kesha1225:TypedCSV</id>
  <published>2020-11-18T05:40:08Z</published>
  <updated>2020-11-18T05:40:08Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>m4hi2: routEar</title>
  <author>
   <name>m4hi2</name>
  </author>
  <link href="https://github.com/m4hi2/routEar" />
  <id>urn:rprimus:github:m4hi2:routEar</id>
  <published>2020-11-18T05:36:55Z</published>
  <updated>2020-11-18T05:36:55Z</updated>
  <content type="html">
   Receives JSON data from router to notify the user (Through Windows ToastNotification) about various network information. The information can be sent via scripts from the router.
  </content>
 </entry>
 <entry>
  <title>KopiSoftware: TRT_Ultra_Fast_Lane_Detect</title>
  <author>
   <name>KopiSoftware</name>
  </author>
  <link href="https://github.com/KopiSoftware/TRT_Ultra_Fast_Lane_Detect" />
  <id>urn:rprimus:github:KopiSoftware:TRT_Ultra_Fast_Lane_Detect</id>
  <published>2020-11-18T05:28:57Z</published>
  <updated>2020-11-18T05:28:57Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>digix2020: digix2020_ctr_rank1</title>
  <author>
   <name>digix2020</name>
  </author>
  <link href="https://github.com/digix2020/digix2020_ctr_rank1" />
  <id>urn:rprimus:github:digix2020:digix2020_ctr_rank1</id>
  <published>2020-11-18T03:59:30Z</published>
  <updated>2020-11-18T03:59:30Z</updated>
  <content type="html">
   åä¸ºdigixç®æ³å¤§èµ2020æºå¨å­¦ä¹ èµé-ctré¢ä¼°åèµ/å³èµrank1
  </content>
 </entry>
 <entry>
  <title>EvanMcCormick1: NumpyChess</title>
  <author>
   <name>EvanMcCormick1</name>
  </author>
  <link href="https://github.com/EvanMcCormick1/NumpyChess" />
  <id>urn:rprimus:github:EvanMcCormick1:NumpyChess</id>
  <published>2020-11-18T01:02:01Z</published>
  <updated>2020-11-18T01:02:01Z</updated>
  <content type="html">
   Chess UI Using Numpy for Python
  </content>
 </entry>
 <entry>
  <title>march0s1as: FVCK_DISCORD</title>
  <author>
   <name>march0s1as</name>
  </author>
  <link href="https://github.com/march0s1as/FVCK_DISCORD" />
  <id>urn:rprimus:github:march0s1as:FVCK_DISCORD</id>
  <published>2020-11-18T00:50:44Z</published>
  <updated>2020-11-18T00:50:44Z</updated>
  <content type="html">
   Por favor, nÃ£o sejamos script kiddie&#039;s. NÃ£o sobreviva de scripts alheios; muito menos de travas. Beijos ! 
  </content>
 </entry>
 <entry>
  <title>localstack: chalice-local</title>
  <author>
   <name>localstack</name>
  </author>
  <link href="https://github.com/localstack/chalice-local" />
  <id>urn:rprimus:github:localstack:chalice-local</id>
  <published>2020-11-17T22:46:15Z</published>
  <updated>2020-11-17T22:46:15Z</updated>
  <content type="html">
   Small wrapper script to use AWS Chalice with LocalStack 
  </content>
 </entry>
 <entry>
  <title>tigthor: neural-network-hacking</title>
  <author>
   <name>tigthor</name>
  </author>
  <link href="https://github.com/tigthor/neural-network-hacking" />
  <id>urn:rprimus:github:tigthor:neural-network-hacking</id>
  <published>2020-11-17T22:36:46Z</published>
  <updated>2020-11-17T22:36:46Z</updated>
  <content type="html">
   Hacking the Singularity. Deep learning hacking. Weaponizing AI in Offensive security
  </content>
 </entry>
 <entry>
  <title>freddier: Horarios</title>
  <author>
   <name>freddier</name>
  </author>
  <link href="https://github.com/freddier/Horarios" />
  <id>urn:rprimus:github:freddier:Horarios</id>
  <published>2020-11-17T21:26:22Z</published>
  <updated>2020-11-17T21:26:22Z</updated>
  <content type="html">
   Banderas compartibles en email, redes, etc de zonas horarias
  </content>
 </entry>
 <entry>
  <title>seksea: auto-status</title>
  <author>
   <name>seksea</name>
  </author>
  <link href="https://github.com/seksea/auto-status" />
  <id>urn:rprimus:github:seksea:auto-status</id>
  <published>2020-11-17T20:15:50Z</published>
  <updated>2020-11-17T20:15:50Z</updated>
  <content type="html">
   Ever wanted to have discord say you&#039;ve played Garfield Kart for 10k+ days or say you&#039;re competing in a made up tournament? Well this project is for you!
  </content>
 </entry>
 <entry>
  <title>SuperSat001: Discord-Mock-Bot</title>
  <author>
   <name>SuperSat001</name>
  </author>
  <link href="https://github.com/SuperSat001/Discord-Mock-Bot" />
  <id>urn:rprimus:github:SuperSat001:Discord-Mock-Bot</id>
  <published>2020-11-17T19:32:34Z</published>
  <updated>2020-11-17T19:32:34Z</updated>
  <content type="html">
   A discord bot which can mock exams on discord. Currently mocking Physics Brawl 2019
  </content>
 </entry>
 <entry>
  <title>oSTEM: lovelace</title>
  <author>
   <name>oSTEM</name>
  </author>
  <link href="https://github.com/oSTEM/lovelace" />
  <id>urn:rprimus:github:oSTEM:lovelace</id>
  <published>2020-11-17T19:06:13Z</published>
  <updated>2020-11-17T19:06:13Z</updated>
  <content type="html">
   oSTEM&#039;s custom Discord bot, Lovelace. Currently in an alpha state with major rewrites and reorganization to come.
  </content>
 </entry>
 <entry>
  <title>Michal2SAB: XGEN-DISCORD-BOT</title>
  <author>
   <name>Michal2SAB</name>
  </author>
  <link href="https://github.com/Michal2SAB/XGEN-DISCORD-BOT" />
  <id>urn:rprimus:github:Michal2SAB:XGEN-DISCORD-BOT</id>
  <published>2020-11-17T19:00:57Z</published>
  <updated>2020-11-17T19:00:57Z</updated>
  <content type="html">
   A discord bot for xgenstudios. Mostly for stick arena.
  </content>
 </entry>
 <entry>
  <title>skywalker-its: CHAT-BOT</title>
  <author>
   <name>skywalker-its</name>
  </author>
  <link href="https://github.com/skywalker-its/CHAT-BOT" />
  <id>urn:rprimus:github:skywalker-its:CHAT-BOT</id>
  <published>2020-11-17T18:43:22Z</published>
  <updated>2020-11-17T18:43:22Z</updated>
  <content type="html">
   Let&#039;s talk with Buddy and take a maths quiz ^_^
  </content>
 </entry>
 <entry>
  <title>GatewayFolks: WriteUps</title>
  <author>
   <name>GatewayFolks</name>
  </author>
  <link href="https://github.com/GatewayFolks/WriteUps" />
  <id>urn:rprimus:github:GatewayFolks:WriteUps</id>
  <published>2020-11-17T18:41:01Z</published>
  <updated>2020-11-17T18:41:01Z</updated>
  <content type="html">
   CTF write ups
  </content>
 </entry>
 <entry>
  <title>developmentseed: remote-workstation</title>
  <author>
   <name>developmentseed</name>
  </author>
  <link href="https://github.com/developmentseed/remote-workstation" />
  <id>urn:rprimus:github:developmentseed:remote-workstation</id>
  <published>2020-11-17T17:46:40Z</published>
  <updated>2020-11-17T17:46:40Z</updated>
  <content type="html">
   A Dockerised work environment hosted on AWS Fargate which can be SSH&#039;d into âï¸ðð¦
  </content>
 </entry>
 <entry>
  <title>amrsaeedhosny: countries</title>
  <author>
   <name>amrsaeedhosny</name>
  </author>
  <link href="https://github.com/amrsaeedhosny/countries" />
  <id>urn:rprimus:github:amrsaeedhosny:countries</id>
  <published>2020-11-17T17:19:54Z</published>
  <updated>2020-11-17T17:19:54Z</updated>
  <content type="html">
   The list of countries stored in different file formats.
  </content>
 </entry>
 <entry>
  <title>hackliza: gmcalc</title>
  <author>
   <name>hackliza</name>
  </author>
  <link href="https://github.com/hackliza/gmcalc" />
  <id>urn:rprimus:github:hackliza:gmcalc</id>
  <published>2020-11-17T17:13:54Z</published>
  <updated>2020-11-17T17:13:54Z</updated>
  <content type="html">
   glibc malloc chunk sizes and bins calculator
  </content>
 </entry>
 <entry>
  <title>XeonObject: PyClash</title>
  <author>
   <name>XeonObject</name>
  </author>
  <link href="https://github.com/XeonObject/PyClash" />
  <id>urn:rprimus:github:XeonObject:PyClash</id>
  <published>2020-11-17T17:04:14Z</published>
  <updated>2020-11-17T17:04:14Z</updated>
  <content type="html">
   Python 3.9 Clash of Clans Server
  </content>
 </entry>
 <entry>
  <title>nikita-tomilov: marking-helper</title>
  <author>
   <name>nikita-tomilov</name>
  </author>
  <link href="https://github.com/nikita-tomilov/marking-helper" />
  <id>urn:rprimus:github:nikita-tomilov:marking-helper</id>
  <published>2020-11-17T17:02:54Z</published>
  <updated>2020-11-17T17:02:54Z</updated>
  <content type="html">
   A helper for marking data
  </content>
 </entry>
 <entry>
  <title>techge: PRE-list</title>
  <author>
   <name>techge</name>
  </author>
  <link href="https://github.com/techge/PRE-list" />
  <id>urn:rprimus:github:techge:PRE-list</id>
  <published>2020-11-17T16:44:12Z</published>
  <updated>2020-11-17T16:44:12Z</updated>
  <content type="html">
   List of (automatic) protocol reverse engineering tools for network protocols
  </content>
 </entry>
 <entry>
  <title>SivaramNalliboyana: TicTacToe-App-with-Kivy</title>
  <author>
   <name>SivaramNalliboyana</name>
  </author>
  <link href="https://github.com/SivaramNalliboyana/TicTacToe-App-with-Kivy" />
  <id>urn:rprimus:github:SivaramNalliboyana:TicTacToe-App-with-Kivy</id>
  <published>2020-11-17T15:18:11Z</published>
  <updated>2020-11-17T15:18:11Z</updated>
  <content type="html">
   A full TicTacToe App developed with Kivy,Python and Kiyvmd
  </content>
 </entry>
 <entry>
  <title>dcsync: aggressor</title>
  <author>
   <name>dcsync</name>
  </author>
  <link href="https://github.com/dcsync/aggressor" />
  <id>urn:rprimus:github:dcsync:aggressor</id>
  <published>2020-11-17T15:12:35Z</published>
  <updated>2020-11-17T15:12:35Z</updated>
  <content type="html">
   aggressor and pycobalt scripts.
  </content>
 </entry>
 <entry>
  <title>xieqk: Bilibili_Spider_by_UserID</title>
  <author>
   <name>xieqk</name>
  </author>
  <link href="https://github.com/xieqk/Bilibili_Spider_by_UserID" />
  <id>urn:rprimus:github:xieqk:Bilibili_Spider_by_UserID</id>
  <published>2020-11-17T13:58:58Z</published>
  <updated>2020-11-17T13:58:58Z</updated>
  <content type="html">
   Python ç¬åBç«UPä¸»çææè§é¢é¾æ¥åè¯¦ç»ä¿¡æ¯
  </content>
 </entry>
 <entry>
  <title>lt94: GeekHub-App</title>
  <author>
   <name>lt94</name>
  </author>
  <link href="https://github.com/lt94/GeekHub-App" />
  <id>urn:rprimus:github:lt94:GeekHub-App</id>
  <published>2020-11-17T12:24:38Z</published>
  <updated>2020-11-17T12:24:38Z</updated>
  <content type="html">
   GeekHub macOS statusBar App
  </content>
 </entry>
 <entry>
  <title>hosseinkasaiyan: Web-tester</title>
  <author>
   <name>hosseinkasaiyan</name>
  </author>
  <link href="https://github.com/hosseinkasaiyan/Web-tester" />
  <id>urn:rprimus:github:hosseinkasaiyan:Web-tester</id>
  <published>2020-11-17T11:25:22Z</published>
  <updated>2020-11-17T11:25:22Z</updated>
  <content type="html">
   Web data collection
  </content>
 </entry>
 <entry>
  <title>BensonHuangTW: Machine_Learning_Foundations_Fall2020_Homework_Solutions</title>
  <author>
   <name>BensonHuangTW</name>
  </author>
  <link href="https://github.com/BensonHuangTW/Machine_Learning_Foundations_Fall2020_Homework_Solutions" />
  <id>urn:rprimus:github:BensonHuangTW:Machine_Learning_Foundations_Fall2020_Homework_Solutions</id>
  <published>2020-11-17T10:56:01Z</published>
  <updated>2020-11-17T10:56:01Z</updated>
  <content type="html">
   Solutions and Codes Example for Assignments of Machine Learning Foundation, Fall 2020, National Taiwan University
  </content>
 </entry>
 <entry>
  <title>dskaowu: GenShin</title>
  <author>
   <name>dskaowu</name>
  </author>
  <link href="https://github.com/dskaowu/GenShin" />
  <id>urn:rprimus:github:dskaowu:GenShin</id>
  <published>2020-11-17T10:02:24Z</published>
  <updated>2020-11-17T10:02:24Z</updated>
  <content type="html">
   åç¥æå¡å¨åæ¢
  </content>
 </entry>
 <entry>
  <title>cbasnett: Log-Extractor</title>
  <author>
   <name>cbasnett</name>
  </author>
  <link href="https://github.com/cbasnett/Log-Extractor" />
  <id>urn:rprimus:github:cbasnett:Log-Extractor</id>
  <published>2020-11-17T08:45:53Z</published>
  <updated>2020-11-17T08:45:53Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>anjapetkovic: type-theory-slovene-dictionary</title>
  <author>
   <name>anjapetkovic</name>
  </author>
  <link href="https://github.com/anjapetkovic/type-theory-slovene-dictionary" />
  <id>urn:rprimus:github:anjapetkovic:type-theory-slovene-dictionary</id>
  <published>2020-11-17T08:38:15Z</published>
  <updated>2020-11-17T08:38:15Z</updated>
  <content type="html">
   A dictionary of slovene translations of type-theoretical notions and notions from logic and foundations of mathematics.
  </content>
 </entry>
 <entry>
  <title>jonathan-darius: Tic-Tac-Toe-Game</title>
  <author>
   <name>jonathan-darius</name>
  </author>
  <link href="https://github.com/jonathan-darius/Tic-Tac-Toe-Game" />
  <id>urn:rprimus:github:jonathan-darius:Tic-Tac-Toe-Game</id>
  <published>2020-11-17T06:48:31Z</published>
  <updated>2020-11-17T06:48:31Z</updated>
  <content type="html">
   Tic Tac Toe Game Use CLI
  </content>
 </entry>
 <entry>
  <title>DebRC: Algorithm-Visualizer</title>
  <author>
   <name>DebRC</name>
  </author>
  <link href="https://github.com/DebRC/Algorithm-Visualizer" />
  <id>urn:rprimus:github:DebRC:Algorithm-Visualizer</id>
  <published>2020-11-17T04:52:54Z</published>
  <updated>2020-11-17T04:52:54Z</updated>
  <content type="html">
   A desktop app made using Tkinter and Pygame modules of Python to visualize different algorithms with vibrant graphics and colors.
  </content>
 </entry>
 <entry>
  <title>himanshub1007: Alzhimers-Disease-Prediction-Using-Deep-learning</title>
  <author>
   <name>himanshub1007</name>
  </author>
  <link href="https://github.com/himanshub1007/Alzhimers-Disease-Prediction-Using-Deep-learning" />
  <id>urn:rprimus:github:himanshub1007:Alzhimers-Disease-Prediction-Using-Deep-learning</id>
  <published>2020-11-17T04:10:06Z</published>
  <updated>2020-11-17T04:10:06Z</updated>
  <content type="html">
   # AD-Prediction  Convolutional Neural Networks for Alzheimer&#039;s Disease Prediction Using Brain MRI Image  ## Abstract Alzheimers disease (AD) is characterized by severe memory loss and cognitive impairment. It associates with significant brain structure changes, which can be measured by magnetic resonance imaging (MRI) scan. The observable preclinical structure changes provides an opportunity for AD early detection using image classification tools, like convolutional neural network (CNN). However, currently most AD related studies were limited by sample size. Finding an efficient way to train image classifier on limited data is critical. In our project, we explored different transfer-learning methods based on CNN for AD prediction brain structure MRI image. We find that both pretrained 2D AlexNet with 2D-representation method and simple neural network with pretrained 3D autoencoder improved the prediction performance comparing to a deep CNN trained from scratch. The pretrained 2D AlexNet performed even better (**86%**) than the 3D CNN with autoencoder (**77%**).  ## Method #### 1. Data In this project, we used public brain MRI data from **Alzheimers Disease Neuroimaging Initiative (ADNI)** Study. ADNI is an ongoing, multicenter cohort study, started from 2004. It focuses on understanding the diagnostic and predictive value of Alzheimers disease specific biomarkers. The ADNI study has three phases: ADNI1, ADNI-GO, and ADNI2. Both ADNI1 and ADNI2 recruited new AD patients and normal control as research participants. Our data included a total of 686 structure MRI scans from both ADNI1 and ADNI2 phases, with 310 AD cases and 376 normal controls. We randomly derived the total sample into training dataset (n = 519), validation dataset (n = 100), and testing dataset (n = 67).  #### 2. Image preprocessing Image preprocessing were conducted using Statistical Parametric Mapping (SPM) software, version 12. The original MRI scans were first skull-stripped and segmented using segmentation algorithm based on 6-tissue probability mapping and then normalized to the International Consortium for Brain Mapping template of European brains using affine registration. Other configuration includes: bias, noise, and global intensity normalization. The standard preprocessing process output 3D image files with an uniform size of 121x145x121. Skull-stripping and normalization ensured the comparability between images by transforming the original brain image into a standard image space, so that same brain substructures can be aligned at same image coordinates for different participants. Diluted or enhanced intensity was used to compensate the structure changes. the In our project, we used both whole brain (including both grey matter and white matter) and grey matter only.  #### 3. AlexNet and Transfer Learning Convolutional Neural Networks (CNN) are very similar to ordinary Neural Networks. A CNN consists of an input and an output layer, as well as multiple hidden layers. The hidden layers are either convolutional, pooling or fully connected. ConvNet architectures make the explicit assumption that the inputs are images, which allows us to encode certain properties into the architecture. These then make the forward function more efficient to implement and vastly reduce the amount of parameters in the network.  #### 3.1. AlexNet The net contains eight layers with weights; the first five are convolutional and the remaining three are fully connected. The overall architecture is shown in Figure 1. The output of the last fully-connected layer is fed to a 1000-way softmax which produces a distribution over the 1000 class labels. AlexNet maximizes the multinomial logistic regression objective, which is equivalent to maximizing the average across training cases of the log-probability of the correct label under the prediction distribution. The kernels of the second, fourth, and fifth convolutional layers are connected only to those kernel maps in the previous layer which reside on the same GPU (as shown in Figure1). The kernels of the third convolutional layer are connected to all kernel maps in the second layer. The neurons in the fully connected layers are connected to all neurons in the previous layer. Response-normalization layers follow the first and second convolutional layers. Max-pooling layers follow both response-normalization layers as well as the fifth convolutional layer. The ReLU non-linearity is applied to the output of every convolutional and fully-connected layer. ![](images/f1.png)  The first convolutional layer filters the 224x224x3 input image with 96 kernels of size 11x11x3 with a stride of 4 pixels (this is the distance between the receptive field centers of neighboring neurons in a kernel map). The second convolutional layer takes as input the (response-normalized and pooled) output of the first convolutional layer and filters it with 256 kernels of size 5x5x48. The third, fourth, and fifth convolutional layers are connected to one another without any intervening pooling or normalization layers. The third convolutional layer has 384 kernels of size 3x3x256 connected to the (normalized, pooled) outputs of the second convolutional layer. The fourth convolutional layer has 384 kernels of size 3x3x192 , and the fifth convolutional layer has 256 kernels of size 3x3x192. The fully-connected layers have 4096 neurons each.  #### 3.2. Transfer Learning Training an entire Convolutional Network from scratch (with random initialization) is impractical[14] because it is relatively rare to have a dataset of sufficient size. An alternative is to pretrain a Conv-Net on a very large dataset (e.g. ImageNet), and then use the ConvNet either as an initialization or a fixed feature extractor for the task of interest. Typically, there are three major transfer learning scenarios:   **ConvNet as fixed feature extractor:** We can take a ConvNet pretrained on ImageNet, and remove the last fully-connected layer, then treat the rest structure as a fixed feature extractor for the target dataset. In AlexNet, this would be a 4096-D vector. Usually, we call these features as CNN codes. Once we get these features, we can train a linear classifier (e.g. linear SVM or Softmax classifier) for our target dataset.   **Fine-tuning the ConvNet:** Another idea is not only replace the last fully-connected layer in the classifier, but to also fine-tune the parameters of the pretrained network. Due to overfitting concerns, we can only fine-tune some higher-level part of the network. This suggestion is motivated by the observation that earlier features in a ConvNet contains more generic features (e.g. edge detectors or color blob detectors) that can be useful for many kind of tasks. But the later layer of the network becomes progressively more specific to the details of the classes contained in the original dataset.   **Pretrained models:** The released pretrained model is usually the final ConvNet checkpoint. So it is common to see people use the network for fine-tuning.  #### 4. 3D Autoencoder and Convolutional Neural Network We take a two-stage approach where we first train a 3D sparse autoencoder to learn filters for convolution operations, and then build a convolutional neural network whose first layer uses the filters learned with the autoencoder. ![](images/f2.png)  #### 4.1. Sparse Autoencoder An autoencoder is a 3-layer neural network that is used to extract features from an input such as an image. Sparse representations can provide a simple interpretation of the input data in terms of a small number of \parts by extracting the structure hidden in the data. The autoencoder has an input layer, a hidden layer and an output layer, and the input and output layers have same number of units, while the hidden layer contains more units for a sparse and overcomplete representation. The encoder function maps input x to representation h, and the decoder function maps the representation h to the output x. In our problem, we extract 3D patches from scans as the input to the network. The decoder function aims to reconstruct the input form the hidden representation h.  #### 4.2. 3D Convolutional Neural Network Training the 3D convolutional neural network(CNN) is the second stage. The CNN we use in this project has one convolutional layer, one pooling layer, two linear layers, and finally a log softmax layer. After training the sparse autoencoder, we take the weights and biases of the encoder from trained model, and use them a 3D filter of a 3D convolutional layer of the 1-layer convolutional neural network. Figure 2 shows the architecture of the network.  #### 5. Tools In this project, we used Nibabel for MRI image processing and PyTorch Neural Networks implementation.
  </content>
 </entry>
 <entry>
  <title>urielzo: Big-Sur-Style</title>
  <author>
   <name>urielzo</name>
  </author>
  <link href="https://github.com/urielzo/Big-Sur-Style" />
  <id>urn:rprimus:github:urielzo:Big-Sur-Style</id>
  <published>2020-11-17T03:23:18Z</published>
  <updated>2020-11-17T03:23:18Z</updated>
  <content type="html">
   Dropdown menus are tall polybar bars that are moved with xdotool. Its a bit hacky but it works well.
  </content>
 </entry>
 <entry>
  <title>DaniellTa: kahootcheat</title>
  <author>
   <name>DaniellTa</name>
  </author>
  <link href="https://github.com/DaniellTa/kahootcheat" />
  <id>urn:rprimus:github:DaniellTa:kahootcheat</id>
  <published>2020-11-17T03:13:52Z</published>
  <updated>2020-11-17T03:13:52Z</updated>
  <content type="html">
   Find answers to kahoots by game id
  </content>
 </entry>
 <entry>
  <title>awslabs: mlmax</title>
  <author>
   <name>awslabs</name>
  </author>
  <link href="https://github.com/awslabs/mlmax" />
  <id>urn:rprimus:github:awslabs:mlmax</id>
  <published>2020-11-17T00:17:19Z</published>
  <updated>2020-11-17T00:17:19Z</updated>
  <content type="html">
   Example templates for the delivery of custom ML solutions to production so you can get started quickly without having to make too many design choices.
  </content>
 </entry>
</feed>
